b'# coding=utf-8\nimport unittest\n\n"""1022. Sum of Root To Leaf Binary Numbers\nhttps://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers/description/\n\nGiven a binary tree, each node has value `0` or `1`.  Each root-to-leaf path\nrepresents a binary number starting with the most significant bit.  For\nexample, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then this could represent\n`01101` in binary, which is `13`.\n\nFor all leaves in the tree, consider the numbers represented by the path from\nthe root to that leaf.\n\nReturn the sum of these numbers.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/04/04/sum-of-root-to-leaf-binary-\nnumbers.png)\n\n    \n    \r\n    **Input:** [1,0,1,0,1,0,1]\r\n    **Output:** 22\r\n    **Explanation:** (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\r\n    \n\n\n\n**Note:**\n\n  1. The number of nodes in the tree is between `1` and `1000`.\n  2. node.val is `0` or `1`.\n  3. The answer will not exceed `2^31 - 1`.\n\n\nSimilar Questions:\n\n"""\n\n\n# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def sumRootToLeaf(self, root):\r\n        """\r\n        :type root: TreeNode\r\n        :rtype: int\r\n        """\r\n        \n\nclass T(unittest.TestCase):\n    def test(self):\n        pass\n\n\nif __name__ == "__main__":\n    unittest.main()\n'