{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "sessionId": "0", 
    "sampleTestCase": "[\"SummaryRanges\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\"]\n[[],[1],[],[3],[],[7],[],[2],[],[6],[]]", 
    "questionFrontendId": "352", 
    "contributors": "[]", 
    "randomQuestionUrl": "/problems/random-one-question/", 
    "enableSubmit": true, 
    "metaData": "{\r\n    \"classname\": \"SummaryRanges\",\r\n    \"constructor\": {\r\n        \"params\": [\r\n        ],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"addNum\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"val\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            }\r\n        },\r\n        {\r\n            \"name\" : \"getIntervals\",\r\n            \"params\": [],\r\n            \"return\": {\r\n                \"type\": \"list<Interval>\"\r\n            }\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}", 
    "questionDetailUrl": "/problems/data-stream-as-disjoint-intervals/", 
    "stats": "{\"totalAccepted\": \"17.9K\", \"totalSubmission\": \"43.4K\", \"acRate\": \"41.2%\"}", 
    "interpretUrl": "/problems/data-stream-as-disjoint-intervals/interpret_solution/", 
    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}", 
    "__typename": "QuestionNode", 
    "topicTags": [
      {
        "translatedName": null, 
        "slug": "binary-search-tree", 
        "__typename": "TopicTagNode", 
        "name": "Binary Search Tree"
      }
    ], 
    "content": "<p>Given a data stream input of non-negative integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>, ..., summarize the numbers seen so far as a list of disjoint intervals.</p>\r\n\r\n<p>For example, suppose the integers from the data stream are 1, 3, 7, 2, 6, ..., then the summary will be:</p>\r\n<pre>\r\n[1, 1]\r\n[1, 1], [3, 3]\r\n[1, 1], [3, 3], [7, 7]\r\n[1, 3], [7, 7]\r\n[1, 3], [6, 7]\r\n</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nWhat if there are lots of merges and the number of disjoint intervals are small compared to the data stream's size?\r\n</p>\r\n\r\n<p><b>Credits:</b><br />Special thanks to <a href=\"https://discuss.leetcode.com/user/yunhong\">@yunhong</a> for adding this problem and creating most of the test cases.</p>", 
    "enableTestMode": false, 
    "submitUrl": "/problems/data-stream-as-disjoint-intervals/submit/", 
    "questionId": "352", 
    "infoVerified": false, 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.10.3</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"]}", 
    "difficulty": "Hard", 
    "allowDiscuss": true, 
    "article": "{}", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\r\\n * Definition for an interval.\\r\\n * struct Interval {\\r\\n *     int start;\\r\\n *     int end;\\r\\n *     Interval() : start(0), end(0) {}\\r\\n *     Interval(int s, int e) : start(s), end(e) {}\\r\\n * };\\r\\n */\\r\\nclass SummaryRanges {\\r\\npublic:\\r\\n    /** Initialize your data structure here. */\\r\\n    SummaryRanges() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    void addNum(int val) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    vector<Interval> getIntervals() {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * Your SummaryRanges object will be instantiated and called as such:\\r\\n * SummaryRanges obj = new SummaryRanges();\\r\\n * obj.addNum(val);\\r\\n * vector<Interval> param_2 = obj.getIntervals();\\r\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\r\\n * Definition for an interval.\\r\\n * public class Interval {\\r\\n *     int start;\\r\\n *     int end;\\r\\n *     Interval() { start = 0; end = 0; }\\r\\n *     Interval(int s, int e) { start = s; end = e; }\\r\\n * }\\r\\n */\\r\\nclass SummaryRanges {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    public SummaryRanges() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public void addNum(int val) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public List<Interval> getIntervals() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your SummaryRanges object will be instantiated and called as such:\\r\\n * SummaryRanges obj = new SummaryRanges();\\r\\n * obj.addNum(val);\\r\\n * List<Interval> param_2 = obj.getIntervals();\\r\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for an interval.\\r\\n# class Interval(object):\\r\\n#     def __init__(self, s=0, e=0):\\r\\n#         self.start = s\\r\\n#         self.end = e\\r\\n\\r\\nclass SummaryRanges(object):\\r\\n\\r\\n    def __init__(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Initialize your data structure here.\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def addNum(self, val):\\r\\n        \\\"\\\"\\\"\\r\\n        :type val: int\\r\\n        :rtype: void\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def getIntervals(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: List[Interval]\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your SummaryRanges object will be instantiated and called as such:\\r\\n# obj = SummaryRanges()\\r\\n# obj.addNum(val)\\r\\n# param_2 = obj.getIntervals()\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for an interval.\\n# class Interval:\\n#     def __init__(self, s=0, e=0):\\n#         self.start = s\\n#         self.end = e\\n\\nclass SummaryRanges:\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def addNum(self, val):\\n        \\\"\\\"\\\"\\n        :type val: int\\n        :rtype: void\\n        \\\"\\\"\\\"\\n        \\n\\n    def getIntervals(self):\\n        \\\"\\\"\\\"\\n        :rtype: List[Interval]\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your SummaryRanges object will be instantiated and called as such:\\n# obj = SummaryRanges()\\n# obj.addNum(val)\\n# param_2 = obj.getIntervals()\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\r\\n * Definition for an interval.\\r\\n * struct Interval {\\r\\n *     int start;\\r\\n *     int end;\\r\\n * };\\r\\n */\\r\\ntypedef struct {\\r\\n    \\r\\n} SummaryRanges;\\r\\n\\r\\n/** Initialize your data structure here. */\\r\\nSummaryRanges* summaryRangesCreate() {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid summaryRangesAddNum(SummaryRanges* obj, int val) {\\r\\n    \\r\\n}\\r\\n\\r\\nstruct Interval* summaryRangesGetIntervals(SummaryRanges* obj, int *returnSize) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid summaryRangesFree(SummaryRanges* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/**\\r\\n * Your SummaryRanges struct will be instantiated and called as such:\\r\\n * struct SummaryRanges* obj = summaryRangesCreate();\\r\\n * summaryRangesAddNum(obj, val);\\r\\n * struct Interval* param_2 = summaryRangesGetIntervals(obj);\\r\\n * summaryRangesFree(obj);\\r\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\r\\n * Definition for an interval.\\r\\n * type Interval struct {\\r\\n *\\t   Start int\\r\\n *\\t   End   int\\r\\n * }\\r\\n */\\r\\ntype SummaryRanges struct {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/** Initialize your data structure here. */\\r\\nfunc Constructor() SummaryRanges {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nfunc (this *SummaryRanges) Addnum(val int)  {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nfunc (this *SummaryRanges) Getintervals() []Interval {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * Your SummaryRanges object will be instantiated and called as such:\\r\\n * obj := Constructor();\\r\\n * obj.Addnum(val);\\r\\n * param_2 := obj.Getintervals();\\r\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for an interval.\\n * class Interval(var _start: Int = 0, var _end: Int = 0) {\\n *   var start: Int = _start\\n *   var end: Int = _end\\n * }\\n */\\nclass SummaryRanges() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    def addNum(`val`: Int) {\\n        \\n    }\\n\\n    def getIntervals(): List[Interval] = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your SummaryRanges object will be instantiated and called as such:\\n * var obj = new SummaryRanges()\\n * obj.addNum(`val`)\\n * var param_2 = obj.getIntervals()\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for an interval.\\n * class Interval(\\n *     var start: Int = 0,\\n *     var end: Int = 0\\n * )\\n */\\nclass SummaryRanges() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    fun addNum(`val`: Int) {\\n        \\n    }\\n\\n    fun getIntervals(): List<Interval> {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your SummaryRanges object will be instantiated and called as such:\\n * var obj = SummaryRanges()\\n * obj.addNum(`val`)\\n * var param_2 = obj.getIntervals()\\n */\"}]", 
    "judgerAvailable": true, 
    "questionTitleSlug": "data-stream-as-disjoint-intervals", 
    "similarQuestions": "[{\"title\": \"Summary Ranges\", \"titleSlug\": \"summary-ranges\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Right Interval\", \"titleSlug\": \"find-right-interval\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Range Module\", \"titleSlug\": \"range-module\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]", 
    "libraryUrl": null, 
    "enableRunCode": true, 
    "questionTitle": "Data Stream as Disjoint Intervals", 
    "categoryTitle": "Algorithms", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }, 
  "loginUrl": "/accounts/login/", 
  "subscribeUrl": "/subscribe/"
}