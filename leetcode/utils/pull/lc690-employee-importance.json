{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "sessionId": "0", 
    "sampleTestCase": "[[1,2,[2]], [2,3,[]]]\n2", 
    "questionFrontendId": "690", 
    "contributors": "[{\"username\": \"fallcreek\", \"profileUrl\": \"/fallcreek/\"}]", 
    "randomQuestionUrl": "/problems/random-one-question/", 
    "enableSubmit": true, 
    "metaData": "{\r\n  \"name\": \"getImportance\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"employees\",\r\n      \"type\": \"list<Employee>\"\r\n    },\r\n    {\r\n      \"name\": \"id\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  },\r\n  \"structures\": [\r\n    {\r\n      \"name\": \"Employee\",\r\n      \"comment\": \"Employee info\",\r\n      \"members\": [\r\n        {\r\n          \"name\": \"id\",\r\n          \"type\": \"integer\",\r\n          \"comment\": \"unique id of this employee\"\r\n        },\r\n        {\r\n            \"name\": \"importance\",\r\n            \"type\": \"integer\",\r\n            \"comment\": \"the importance value of this employee\"\r\n        },\r\n        {\r\n          \"name\": \"subordinates\",\r\n          \"type\": \"list<integer>\",\r\n          \"comment\": \"the id of direct subordinates\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}", 
    "questionDetailUrl": "/problems/employee-importance/", 
    "stats": "{\"totalAccepted\": \"25.4K\", \"totalSubmission\": \"49.1K\", \"acRate\": \"51.7%\"}", 
    "interpretUrl": "/problems/employee-importance/interpret_solution/", 
    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}", 
    "__typename": "QuestionNode", 
    "topicTags": [
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "slug": "hash-table", 
        "name": "Hash Table"
      }, 
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "slug": "depth-first-search", 
        "name": "Depth-first Search"
      }, 
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "slug": "breadth-first-search", 
        "name": "Breadth-first Search"
      }
    ], 
    "content": "<p>You are given a data structure of employee information, which includes the employee's <b>unique id</b>, his <b>importance value</b> and his <b>direct</b> subordinates' id. </p>\r\n\r\n<p>For example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. They have importance value 15, 10 and 5, respectively. Then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is <b>not direct</b>.</p>\r\n\r\n<p>Now given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all his subordinates.</p>\r\n\r\n<p><b>Example 1:</b><br/>\r\n<pre>\r\n<b>Input:</b> [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\r\n<b>Output:</b> 11\r\n<b>Explanation:</b>\r\nEmployee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3. They both have importance value 3. So the total importance value of employee 1 is 5 + 3 + 3 = 11.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>One employee has at most one <b>direct</b> leader and may have several subordinates.</li>\r\n<li>The maximum number of employees won't exceed 2000.</li>\r\n</ol>\r\n</p>", 
    "enableTestMode": false, 
    "submitUrl": "/problems/employee-importance/submit/", 
    "questionId": "690", 
    "infoVerified": false, 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"]}", 
    "difficulty": "Easy", 
    "allowDiscuss": true, 
    "article": "{\"id\": 303, \"url\": \"/articles/employee-importance/\", \"topicId\": 127681}", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/*\\r\\n// Employee info\\r\\nclass Employee {\\r\\npublic:\\r\\n    // It's the unique ID of each node.\\r\\n    // unique id of this employee\\r\\n    int id;\\r\\n    // the importance value of this employee\\r\\n    int importance;\\r\\n    // the id of direct subordinates\\r\\n    vector<int> subordinates;\\r\\n};\\r\\n*/\\r\\nclass Solution {\\r\\npublic:\\r\\n    int getImportance(vector<Employee*> employees, int id) {\\r\\n        \\r\\n    }\\r\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/*\\r\\n// Employee info\\r\\nclass Employee {\\r\\n    // It's the unique id of each node;\\r\\n    // unique id of this employee\\r\\n    public int id;\\r\\n    // the importance value of this employee\\r\\n    public int importance;\\r\\n    // the id of direct subordinates\\r\\n    public List<Integer> subordinates;\\r\\n};\\r\\n*/\\r\\nclass Solution {\\r\\n    public int getImportance(List<Employee> employees, int id) {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"\\\"\\\"\\\"\\r\\n# Employee info\\r\\nclass Employee(object):\\r\\n    def __init__(self, id, importance, subordinates):\\r\\n        # It's the unique id of each node.\\r\\n        # unique id of this employee\\r\\n        self.id = id\\r\\n        # the importance value of this employee\\r\\n        self.importance = importance\\r\\n        # the id of direct subordinates\\r\\n        self.subordinates = subordinates\\r\\n\\\"\\\"\\\"\\r\\nclass Solution(object):\\r\\n    def getImportance(self, employees, id):\\r\\n        \\\"\\\"\\\"\\r\\n        :type employees: Employee\\r\\n        :type id: int\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"\\\"\\\"\\\"\\r\\n# Employee info\\r\\nclass Employee:\\r\\n    def __init__(self, id, importance, subordinates):\\r\\n        # It's the unique id of each node.\\r\\n        # unique id of this employee\\r\\n        self.id = id\\r\\n        # the importance value of this employee\\r\\n        self.importance = importance\\r\\n        # the id of direct subordinates\\r\\n        self.subordinates = subordinates\\r\\n\\\"\\\"\\\"\\r\\nclass Solution:\\r\\n    def getImportance(self, employees, id):\\r\\n        \\\"\\\"\\\"\\r\\n        :type employees: Employee\\r\\n        :type id: int\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"=begin\\r\\n# Employee info\\r\\nclass Employee\\r\\n    attr_accessor :id, :importance, :subordinates\\r\\n    def initialize( id, importance, subordinates)\\r\\n        # It's the unique id of each node.\\r\\n        # unique id of this employee\\r\\n        @id = id\\r\\n        # the importance value of this employee\\r\\n        @importance = importance\\r\\n        # the id of direct subordinates\\r\\n        @subordinates = subordinates\\r\\n    end\\r\\nend\\r\\n=end\\r\\n# @param {Employee} employees\\r\\n# @param {Integer} id\\r\\n# @return {Integer}\\r\\ndef get_importance(employees, id)\\r\\n    \\r\\nend\"}]", 
    "judgerAvailable": true, 
    "questionTitleSlug": "employee-importance", 
    "similarQuestions": "[{\"title\": \"Nested List Weight Sum\", \"titleSlug\": \"nested-list-weight-sum\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]", 
    "libraryUrl": null, 
    "enableRunCode": true, 
    "questionTitle": "Employee Importance", 
    "categoryTitle": "Algorithms", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }, 
  "loginUrl": "/accounts/login/", 
  "subscribeUrl": "/subscribe/"
}