{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "sampleTestCase": "[[1,1],2,[1,1]]", 
    "questionFrontendId": "341", 
    "contributors": "[]", 
    "randomQuestionUrl": "/problems/random-one-question/", 
    "enableSubmit": true, 
    "metaData": "{\r\n  \"name\": \"\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nestedList\",\r\n      \"type\": \"list<NestedInteger>\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}", 
    "enableRunCode": true, 
    "questionDetailUrl": "/problems/flatten-nested-list-iterator/", 
    "stats": "{\"totalAccepted\": \"68.1K\", \"totalSubmission\": \"155.8K\", \"acRate\": \"43.7%\"}", 
    "interpretUrl": "/problems/flatten-nested-list-iterator/interpret_solution/", 
    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}", 
    "__typename": "QuestionNode", 
    "topicTags": [
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "name": "Stack", 
        "slug": "stack"
      }, 
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "name": "Design", 
        "slug": "design"
      }
    ], 
    "content": "<p>Given a nested list of integers, implement an iterator to flatten it.</p>\r\n\r\n<p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\nGiven the list <code>[[1,1],2,[1,1]]</code>,\r\n<p>\r\nBy calling <i>next</i> repeatedly until <i>hasNext</i> returns false, the order of elements returned by <i>next</i> should be: <code>[1,1,2,1,1]</code>.\r\n</p>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\nGiven the list <code>[1,[4,[6]]]</code>,\r\n<p>\r\nBy calling <i>next</i> repeatedly until <i>hasNext</i> returns false, the order of elements returned by <i>next</i> should be: <code>[1,4,6]</code>.\r\n</p>\r\n</p>", 
    "enableTestMode": false, 
    "submitUrl": "/problems/flatten-nested-list-iterator/submit/", 
    "questionId": "341", 
    "infoVerified": false, 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"]}", 
    "difficulty": "Medium", 
    "allowDiscuss": true, 
    "article": "{}", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\r\\n * // This is the interface that allows for creating nested lists.\\r\\n * // You should not implement it, or speculate about its implementation\\r\\n * class NestedInteger {\\r\\n *   public:\\r\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\r\\n *     bool isInteger() const;\\r\\n *\\r\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\r\\n *     // The result is undefined if this NestedInteger holds a nested list\\r\\n *     int getInteger() const;\\r\\n *\\r\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\r\\n *     // The result is undefined if this NestedInteger holds a single integer\\r\\n *     const vector<NestedInteger> &getList() const;\\r\\n * };\\r\\n */\\r\\nclass NestedIterator {\\r\\npublic:\\r\\n    NestedIterator(vector<NestedInteger> &nestedList) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    int next() {\\r\\n        \\r\\n    }\\r\\n\\r\\n    bool hasNext() {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * Your NestedIterator object will be instantiated and called as such:\\r\\n * NestedIterator i(nestedList);\\r\\n * while (i.hasNext()) cout << i.next();\\r\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\r\\n * // This is the interface that allows for creating nested lists.\\r\\n * // You should not implement it, or speculate about its implementation\\r\\n * public interface NestedInteger {\\r\\n *\\r\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\r\\n *     public boolean isInteger();\\r\\n *\\r\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\r\\n *     // Return null if this NestedInteger holds a nested list\\r\\n *     public Integer getInteger();\\r\\n *\\r\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\r\\n *     // Return null if this NestedInteger holds a single integer\\r\\n *     public List<NestedInteger> getList();\\r\\n * }\\r\\n */\\r\\npublic class NestedIterator implements Iterator<Integer> {\\r\\n\\r\\n    public NestedIterator(List<NestedInteger> nestedList) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public Integer next() {\\r\\n        \\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public boolean hasNext() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your NestedIterator object will be instantiated and called as such:\\r\\n * NestedIterator i = new NestedIterator(nestedList);\\r\\n * while (i.hasNext()) v[f()] = i.next();\\r\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# \\\"\\\"\\\"\\r\\n# This is the interface that allows for creating nested lists.\\r\\n# You should not implement it, or speculate about its implementation\\r\\n# \\\"\\\"\\\"\\r\\n#class NestedInteger(object):\\r\\n#    def isInteger(self):\\r\\n#        \\\"\\\"\\\"\\r\\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\\r\\n#        :rtype bool\\r\\n#        \\\"\\\"\\\"\\r\\n#\\r\\n#    def getInteger(self):\\r\\n#        \\\"\\\"\\\"\\r\\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\\r\\n#        Return None if this NestedInteger holds a nested list\\r\\n#        :rtype int\\r\\n#        \\\"\\\"\\\"\\r\\n#\\r\\n#    def getList(self):\\r\\n#        \\\"\\\"\\\"\\r\\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\\r\\n#        Return None if this NestedInteger holds a single integer\\r\\n#        :rtype List[NestedInteger]\\r\\n#        \\\"\\\"\\\"\\r\\n\\r\\nclass NestedIterator(object):\\r\\n\\r\\n    def __init__(self, nestedList):\\r\\n        \\\"\\\"\\\"\\r\\n        Initialize your data structure here.\\r\\n        :type nestedList: List[NestedInteger]\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def next(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def hasNext(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n# Your NestedIterator object will be instantiated and called as such:\\r\\n# i, v = NestedIterator(nestedList), []\\r\\n# while i.hasNext(): v.append(i.next())\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\r\\n * *********************************************************************\\r\\n * // This is the interface that allows for creating nested lists.\\r\\n * // You should not implement it, or speculate about its implementation\\r\\n * *********************************************************************\\r\\n *\\r\\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\\r\\n * bool NestedIntegerIsInteger(struct NestedInteger *);\\r\\n *\\r\\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\\r\\n * // The result is undefined if this NestedInteger holds a nested list\\r\\n * int NestedIntegerGetInteger(struct NestedInteger *);\\r\\n *\\r\\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\\r\\n * // The result is undefined if this NestedInteger holds a single integer\\r\\n * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);\\r\\n *\\r\\n * // Return the nested list's size that this NestedInteger holds, if it holds a nested list\\r\\n * // The result is undefined if this NestedInteger holds a single integer\\r\\n * int NestedIntegerGetListSize(struct NestedInteger *);\\r\\n * };\\r\\n */\\r\\nstruct NestedIterator {\\r\\n    \\r\\n};\\r\\n\\r\\nstruct NestedIterator *nestedIterCreate(struct NestedInteger** nestedList, int nestedListSize) {\\r\\n    \\r\\n}\\r\\n\\r\\nbool nestedIterHasNext(struct NestedIterator *iter) {\\r\\n    \\r\\n}\\r\\n\\r\\nint nestedIterNext(struct NestedIterator *iter) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Deallocates memory previously allocated for the iterator */\\r\\nvoid nestedIterFree(struct NestedIterator *iter) {\\r\\n    \\r\\n}\\r\\n\\r\\n/**\\r\\n * Your NestedIterator will be called like this:\\r\\n * struct NestedIterator *i = nestedIterCreate(nestedList, nestedListSize);\\r\\n * while (nestedIterHasNext(i)) printf(\\\"%d\\\\n\\\", nestedIterNext(i));\\r\\n * nestedIterFree(i);\\r\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\r\\n * // This is the interface that allows for creating nested lists.\\r\\n * // You should not implement it, or speculate about its implementation\\r\\n * interface NestedInteger {\\r\\n *\\r\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\r\\n *     bool IsInteger();\\r\\n *\\r\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\r\\n *     // Return null if this NestedInteger holds a nested list\\r\\n *     int GetInteger();\\r\\n *\\r\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\r\\n *     // Return null if this NestedInteger holds a single integer\\r\\n *     IList<NestedInteger> GetList();\\r\\n * }\\r\\n */\\r\\npublic class NestedIterator {\\r\\n\\r\\n    public NestedIterator(IList<NestedInteger> nestedList) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    public bool HasNext() {\\r\\n        \\r\\n    }\\r\\n\\r\\n    public int Next() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your NestedIterator will be called like this:\\r\\n * NestedIterator i = new NestedIterator(nestedList);\\r\\n * while (i.HasNext()) v[f()] = i.Next();\\r\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * // This is the interface that allows for creating nested lists.\\r\\n * // You should not implement it, or speculate about its implementation\\r\\n * function NestedInteger() {\\r\\n *\\r\\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\\r\\n *     @return {boolean}\\r\\n *     this.isInteger = function() {\\r\\n *         ...\\r\\n *     };\\r\\n *\\r\\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\\r\\n *     Return null if this NestedInteger holds a nested list\\r\\n *     @return {integer}\\r\\n *     this.getInteger = function() {\\r\\n *         ...\\r\\n *     };\\r\\n *\\r\\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\\r\\n *     Return null if this NestedInteger holds a single integer\\r\\n *     @return {NestedInteger[]}\\r\\n *     this.getList = function() {\\r\\n *         ...\\r\\n *     };\\r\\n * };\\r\\n */\\r\\n/**\\r\\n * @constructor\\r\\n * @param {NestedInteger[]} nestedList\\r\\n */\\r\\nvar NestedIterator = function(nestedList) {\\r\\n    \\r\\n};\\r\\n\\r\\n\\r\\n/**\\r\\n * @this NestedIterator\\r\\n * @returns {boolean}\\r\\n */\\r\\nNestedIterator.prototype.hasNext = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * @this NestedIterator\\r\\n * @returns {integer}\\r\\n */\\r\\nNestedIterator.prototype.next = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Your NestedIterator will be called like this:\\r\\n * var i = new NestedIterator(nestedList), a = [];\\r\\n * while (i.hasNext()) a.push(i.next());\\r\\n*/\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# This is the interface that allows for creating nested lists.\\r\\n# You should not implement it, or speculate about its implementation\\r\\n#\\r\\n#class NestedInteger\\r\\n#    def is_integer()\\r\\n#        \\\"\\\"\\\"\\r\\n#        Return true if this NestedInteger holds a single integer, rather than a nested list.\\r\\n#        @return {Boolean}\\r\\n#        \\\"\\\"\\\"\\r\\n#\\r\\n#    def get_integer()\\r\\n#        \\\"\\\"\\\"\\r\\n#        Return the single integer that this NestedInteger holds, if it holds a single integer\\r\\n#        Return nil if this NestedInteger holds a nested list\\r\\n#        @return {Integer}\\r\\n#        \\\"\\\"\\\"\\r\\n#\\r\\n#    def get_list()\\r\\n#        \\\"\\\"\\\"\\r\\n#        Return the nested list that this NestedInteger holds, if it holds a nested list\\r\\n#        Return nil if this NestedInteger holds a single integer\\r\\n#        @return {NestedInteger[]}\\r\\n#        \\\"\\\"\\\"\\r\\n\\r\\nclass NestedIterator\\r\\n    # @param {NestedInteger[]} nested_list\\r\\n    def initialize(nested_list)\\r\\n        \\r\\n    end\\r\\n\\r\\n    # @return {Boolean}\\r\\n    def has_next\\r\\n        \\r\\n    end\\r\\n\\r\\n    # @return {Integer}\\r\\n    def next\\r\\n        \\r\\n    end\\r\\nend\\r\\n\\r\\n# Your NestedIterator will be called like this:\\r\\n# i, v = NestedIterator.new(nested_list), []\\r\\n# while i.has_next()\\r\\n#    v << i.next\\r\\n# end\"}]", 
    "judgerAvailable": true, 
    "questionTitleSlug": "flatten-nested-list-iterator", 
    "similarQuestions": "[{\"title\": \"Flatten 2D Vector\", \"titleSlug\": \"flatten-2d-vector\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Zigzag Iterator\", \"titleSlug\": \"zigzag-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Mini Parser\", \"titleSlug\": \"mini-parser\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Array Nesting\", \"titleSlug\": \"array-nesting\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]", 
    "libraryUrl": null, 
    "sessionId": "0", 
    "questionTitle": "Flatten Nested List Iterator", 
    "categoryTitle": "Algorithms", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }, 
  "loginUrl": "/accounts/login/", 
  "subscribeUrl": "/subscribe/"
}