{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "questionId": "1028", 
    "questionDetailUrl": "/problems/interval-list-intersections/", 
    "infoVerified": false, 
    "questionFrontendId": "986", 
    "questionTitleSlug": "interval-list-intersections", 
    "similarQuestions": "[]", 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 8.2</code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.18.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 10.15.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.5</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 4.2</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.11.4</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.6</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"], \"rust\": [\"Rust\", \"<p>Compiled with <code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}", 
    "topicTags": [
      {
        "translatedName": null, 
        "name": "Two Pointers", 
        "slug": "two-pointers"
      }
    ], 
    "content": "<p>Given two lists&nbsp;of <strong>closed</strong> intervals, each list of intervals is pairwise disjoint and in sorted order.</p>\r\n\r\n<p>Return the intersection of these two interval lists.</p>\r\n\r\n<p><em>(Formally, a closed interval <code>[a, b]</code> (with <code>a &lt;= b</code>) denotes&nbsp;the set of real numbers <code>x</code> with <code>a &lt;= x &lt;= b</code>.&nbsp; The&nbsp;intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.&nbsp; For example, the intersection of [1, 3] and [2, 4] is [2, 3].)</em></p>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/30/interval1.png\" style=\"width: 506px; height: 140px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[[0,2],[5,10],[13,23],[24,25]]</span>, B = <span id=\"example-input-1-2\">[[1,5],[8,12],[15,24],[25,26]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]</span>\r\n<strong>Reminder: </strong>The inputs and the desired output are lists of Interval&nbsp;objects, and not arrays or lists.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt; 1000</code></li>\r\n\t<li><code>0 &lt;= B.length &lt; 1000</code></li>\r\n\t<li><code>0 &lt;= A[i].start, A[i].end, B[i].start, B[i].end &lt; 10^9</code></li>\r\n</ol>\r\n</div>\r\n", 
    "difficulty": "Medium", 
    "libraryUrl": null, 
    "questionTitle": "Interval List Intersections", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for an interval.\\n * struct Interval {\\n *     int start;\\n *     int end;\\n *     Interval() : start(0), end(0) {}\\n *     Interval(int s, int e) : start(s), end(e) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<Interval> intervalIntersection(vector<Interval>& A, vector<Interval>& B) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for an interval.\\n * public class Interval {\\n *     int start;\\n *     int end;\\n *     Interval() { start = 0; end = 0; }\\n *     Interval(int s, int e) { start = s; end = e; }\\n * }\\n */\\nclass Solution {\\n    public Interval[] intervalIntersection(Interval[] A, Interval[] B) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for an interval.\\n# class Interval(object):\\n#     def __init__(self, s=0, e=0):\\n#         self.start = s\\n#         self.end = e\\n\\nclass Solution(object):\\n    def intervalIntersection(self, A, B):\\n        \\\"\\\"\\\"\\n        :type A: List[Interval]\\n        :type B: List[Interval]\\n        :rtype: List[Interval]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for an interval.\\n# class Interval:\\n#     def __init__(self, s=0, e=0):\\n#         self.start = s\\n#         self.end = e\\n\\nclass Solution:\\n    def intervalIntersection(self, A: List[Interval], B: List[Interval]) -> List[Interval]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for an interval.\\n * struct Interval {\\n *     int start;\\n *     int end;\\n * };\\n */\\n/**\\n * Return an array of size *returnSize.\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nstruct Interval* intervalIntersection(struct Interval* A, int ASize, struct Interval* B, int BSize, int* returnSize) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for an interval.\\n * public class Interval {\\n *     public int start;\\n *     public int end;\\n *     public Interval() { start = 0; end = 0; }\\n *     public Interval(int s, int e) { start = s; end = e; }\\n * }\\n */\\npublic class Solution {\\n    public Interval[] IntervalIntersection(Interval[] A, Interval[] B) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for an interval.\\n * function Interval(start, end) {\\n *     this.start = start;\\n *     this.end = end;\\n * }\\n */\\n/**\\n * @param {Interval[]} A\\n * @param {Interval[]} B\\n * @return {Interval[]}\\n */\\nvar intervalIntersection = function(A, B) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for an interval.\\n# class Interval\\n#     attr_accessor :start, :end\\n#     def initialize(s=0, e=0)\\n#         @start = s\\n#         @end = e\\n#     end\\n# end\\n\\n# @param {Interval[]} a\\n# @param {Interval[]} b\\n# @return {Interval[]}\\ndef interval_intersection(a, b)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for an interval.\\n * public class Interval {\\n *   public var start: Int\\n *   public var end: Int\\n *   public init(_ start: Int, _ end: Int) {\\n *     self.start = start\\n *     self.end = end\\n *   }\\n * }\\n */\\nclass Solution {\\n    func intervalIntersection(_ A: [Interval], _ B: [Interval]) -> [Interval] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for an interval.\\n * type Interval struct {\\n *\\t   Start int\\n *\\t   End   int\\n * }\\n */\\nfunc intervalIntersection(A []Interval, B []Interval) []Interval {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for an interval.\\n * class Interval(var _start: Int = 0, var _end: Int = 0) {\\n *   var start: Int = _start\\n *   var end: Int = _end\\n * }\\n */\\nobject Solution {\\n    def intervalIntersection(A: Array[Interval], B: Array[Interval]): Array[Interval] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for an interval.\\n * class Interval(\\n *     var start: Int = 0,\\n *     var end: Int = 0\\n * )\\n */\\nclass Solution {\\n    fun intervalIntersection(A: Array<Interval>, B: Array<Interval>): Array<Interval> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for an interval.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct Interval {\\n//   pub start: i32,\\n//   pub end: i32,\\n// }\\n// \\n// impl Interval {\\n//   #[inline]\\n//   pub fn new(start: i32, end: i32) -> Self {\\n//     Interval {\\n//       start,\\n//       end\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn interval_intersection(a: Vec<Interval>, b: Vec<Interval>) -> Vec<Interval> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for an interval.\\n * class Interval {\\n *     public $start = 0;\\n *     public $end = 0;\\n *     function __construct(int $start = 0, int $end = 0) {\\n *         $this->start = $start;\\n *         $this->end = $end;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param Interval[] $A\\n     * @param Interval[] $B\\n     * @return Interval[]\\n     */\\n    function intervalIntersection($A, $B) {\\n        \\n    }\\n}\"}]", 
    "categoryTitle": "Algorithms", 
    "article": "{\"id\": 685, \"url\": \"/articles/interval-list-intersections/\", \"topicId\": 231071}", 
    "allowDiscuss": true, 
    "metaData": "{\r\n  \"name\": \"intervalIntersection\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"A\",\r\n      \"type\": \"Interval[]\"\r\n    },\r\n    {\r\n      \"name\": \"B\",\r\n      \"type\": \"Interval[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"Interval[]\"\r\n  }\r\n}\r\n", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }
}