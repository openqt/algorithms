{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "sampleTestCase": "[\"MyStack\",\"push\",\"push\",\"top\",\"pop\",\"empty\"]\n[[],[1],[2],[],[],[]]", 
    "questionFrontendId": "225", 
    "contributors": "[{\"username\": \"jianchao.li.fighter\", \"profileUrl\": \"/jianchaolifighter/\"}]", 
    "randomQuestionUrl": "/problems/random-one-question/", 
    "enableSubmit": true, 
    "metaData": "{\r\n    \"classname\": \"MyStack\",\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"maxSize\",\r\n                \"lang\": \"c\",\r\n                \"value\": \"64000\"\r\n            }\r\n        ],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"push\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"x\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Push element x onto stack.\"\r\n        },\r\n        {\r\n            \"name\" : \"pop\",\r\n            \"params\": [\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"comment\": \"Removes the element on top of the stack and returns that element.\"\r\n        },\r\n        {\r\n            \"name\" : \"top\",\r\n            \"params\": [\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"comment\": \"Get the top element.\"\r\n        },\r\n        {\r\n            \"name\" : \"empty\",\r\n            \"params\": [\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Returns whether the stack is empty.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}", 
    "enableRunCode": true, 
    "questionDetailUrl": "/problems/implement-stack-using-queues/", 
    "stats": "{\"totalAccepted\": \"97.6K\", \"totalSubmission\": \"280.3K\", \"acRate\": \"34.8%\"}", 
    "interpretUrl": "/problems/implement-stack-using-queues/interpret_solution/", 
    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}", 
    "__typename": "QuestionNode", 
    "topicTags": [
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "name": "Stack", 
        "slug": "stack"
      }, 
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "name": "Design", 
        "slug": "design"
      }
    ], 
    "content": "<p>Implement the following operations of a stack using queues.</p>\r\n\r\n<ul>\r\n\t<li>push(x) -- Push element x onto stack.</li>\r\n\t<li>pop() -- Removes the element on top of the stack.</li>\r\n\t<li>top() -- Get the top element.</li>\r\n\t<li>empty() -- Return whether the stack is empty.</li>\r\n</ul>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nMyStack stack = new MyStack();\r\n\r\nstack.push(1);\r\nstack.push(2);  \r\nstack.top();   // returns 2\r\nstack.pop();   // returns 2\r\nstack.empty(); // returns false</pre>\r\n\r\n<p><b>Notes:</b></p>\r\n\r\n<ul>\r\n\t<li>You must use <i>only</i> standard operations of a queue -- which means only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\r\n\t<li>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.</li>\r\n\t<li>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</li>\r\n</ul>\r\n", 
    "enableTestMode": false, 
    "submitUrl": "/problems/implement-stack-using-queues/submit/", 
    "questionId": "225", 
    "infoVerified": false, 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.10.3</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"]}", 
    "difficulty": "Easy", 
    "allowDiscuss": true, 
    "article": "{\"id\": 41, \"url\": \"/articles/implement-stack-using-queues/\", \"topicId\": 127844}", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class MyStack {\\r\\npublic:\\r\\n    /** Initialize your data structure here. */\\r\\n    MyStack() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Push element x onto stack. */\\r\\n    void push(int x) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Removes the element on top of the stack and returns that element. */\\r\\n    int pop() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Get the top element. */\\r\\n    int top() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Returns whether the stack is empty. */\\r\\n    bool empty() {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * Your MyStack object will be instantiated and called as such:\\r\\n * MyStack obj = new MyStack();\\r\\n * obj.push(x);\\r\\n * int param_2 = obj.pop();\\r\\n * int param_3 = obj.top();\\r\\n * bool param_4 = obj.empty();\\r\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class MyStack {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    public MyStack() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Push element x onto stack. */\\r\\n    public void push(int x) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Removes the element on top of the stack and returns that element. */\\r\\n    public int pop() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Get the top element. */\\r\\n    public int top() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Returns whether the stack is empty. */\\r\\n    public boolean empty() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MyStack object will be instantiated and called as such:\\r\\n * MyStack obj = new MyStack();\\r\\n * obj.push(x);\\r\\n * int param_2 = obj.pop();\\r\\n * int param_3 = obj.top();\\r\\n * boolean param_4 = obj.empty();\\r\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class MyStack(object):\\r\\n\\r\\n    def __init__(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Initialize your data structure here.\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def push(self, x):\\r\\n        \\\"\\\"\\\"\\r\\n        Push element x onto stack.\\r\\n        :type x: int\\r\\n        :rtype: void\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def pop(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Removes the element on top of the stack and returns that element.\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def top(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Get the top element.\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def empty(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Returns whether the stack is empty.\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your MyStack object will be instantiated and called as such:\\r\\n# obj = MyStack()\\r\\n# obj.push(x)\\r\\n# param_2 = obj.pop()\\r\\n# param_3 = obj.top()\\r\\n# param_4 = obj.empty()\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class MyStack:\\r\\n\\r\\n    def __init__(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Initialize your data structure here.\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def push(self, x):\\r\\n        \\\"\\\"\\\"\\r\\n        Push element x onto stack.\\r\\n        :type x: int\\r\\n        :rtype: void\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def pop(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Removes the element on top of the stack and returns that element.\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def top(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Get the top element.\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def empty(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Returns whether the stack is empty.\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your MyStack object will be instantiated and called as such:\\r\\n# obj = MyStack()\\r\\n# obj.push(x)\\r\\n# param_2 = obj.pop()\\r\\n# param_3 = obj.top()\\r\\n# param_4 = obj.empty()\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\\r\\n    \\r\\n} MyStack;\\r\\n\\r\\n/** Initialize your data structure here. */\\r\\nMyStack* myStackCreate(int maxSize) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Push element x onto stack. */\\r\\nvoid myStackPush(MyStack* obj, int x) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Removes the element on top of the stack and returns that element. */\\r\\nint myStackPop(MyStack* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Get the top element. */\\r\\nint myStackTop(MyStack* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Returns whether the stack is empty. */\\r\\nbool myStackEmpty(MyStack* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid myStackFree(MyStack* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MyStack struct will be instantiated and called as such:\\r\\n * struct MyStack* obj = myStackCreate(maxSize);\\r\\n * myStackPush(obj, x);\\r\\n * int param_2 = myStackPop(obj);\\r\\n * int param_3 = myStackTop(obj);\\r\\n * bool param_4 = myStackEmpty(obj);\\r\\n * myStackFree(obj);\\r\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class MyStack {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    public MyStack() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Push element x onto stack. */\\r\\n    public void Push(int x) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Removes the element on top of the stack and returns that element. */\\r\\n    public int Pop() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Get the top element. */\\r\\n    public int Top() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Returns whether the stack is empty. */\\r\\n    public bool Empty() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MyStack object will be instantiated and called as such:\\r\\n * MyStack obj = new MyStack();\\r\\n * obj.Push(x);\\r\\n * int param_2 = obj.Pop();\\r\\n * int param_3 = obj.Top();\\r\\n * bool param_4 = obj.Empty();\\r\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * Initialize your data structure here.\\r\\n */\\r\\nvar MyStack = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Push element x onto stack. \\r\\n * @param {number} x\\r\\n * @return {void}\\r\\n */\\r\\nMyStack.prototype.push = function(x) {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Removes the element on top of the stack and returns that element.\\r\\n * @return {number}\\r\\n */\\r\\nMyStack.prototype.pop = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Get the top element.\\r\\n * @return {number}\\r\\n */\\r\\nMyStack.prototype.top = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Returns whether the stack is empty.\\r\\n * @return {boolean}\\r\\n */\\r\\nMyStack.prototype.empty = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * Your MyStack object will be instantiated and called as such:\\r\\n * var obj = Object.create(MyStack).createNew()\\r\\n * obj.push(x)\\r\\n * var param_2 = obj.pop()\\r\\n * var param_3 = obj.top()\\r\\n * var param_4 = obj.empty()\\r\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class MyStack\\r\\n\\r\\n=begin\\r\\n    Initialize your data structure here.\\r\\n=end\\r\\n    def initialize()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Push element x onto stack.\\r\\n    :type x: Integer\\r\\n    :rtype: Void\\r\\n=end\\r\\n    def push(x)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Removes the element on top of the stack and returns that element.\\r\\n    :rtype: Integer\\r\\n=end\\r\\n    def pop()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Get the top element.\\r\\n    :rtype: Integer\\r\\n=end\\r\\n    def top()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Returns whether the stack is empty.\\r\\n    :rtype: Boolean\\r\\n=end\\r\\n    def empty()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\nend\\r\\n\\r\\n# Your MyStack object will be instantiated and called as such:\\r\\n# obj = MyStack.new()\\r\\n# obj.push(x)\\r\\n# param_2 = obj.pop()\\r\\n# param_3 = obj.top()\\r\\n# param_4 = obj.empty()\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type MyStack struct {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Initialize your data structure here. */\\r\\nfunc Constructor() MyStack {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Push element x onto stack. */\\r\\nfunc (this *MyStack) Push(x int)  {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Removes the element on top of the stack and returns that element. */\\r\\nfunc (this *MyStack) Pop() int {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Get the top element. */\\r\\nfunc (this *MyStack) Top() int {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Returns whether the stack is empty. */\\r\\nfunc (this *MyStack) Empty() bool {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * Your MyStack object will be instantiated and called as such:\\r\\n * obj := Constructor();\\r\\n * obj.Push(x);\\r\\n * param_2 := obj.Pop();\\r\\n * param_3 := obj.Top();\\r\\n * param_4 := obj.Empty();\\r\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class MyStack() {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    \\r\\n\\r\\n    /** Push element x onto stack. */\\r\\n    def push(x: Int) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Removes the element on top of the stack and returns that element. */\\r\\n    def pop(): Int = {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Get the top element. */\\r\\n    def top(): Int = {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Returns whether the stack is empty. */\\r\\n    def empty(): Boolean = {\\r\\n        \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MyStack object will be instantiated and called as such:\\r\\n * var obj = new MyStack()\\r\\n * obj.push(x)\\r\\n * var param_2 = obj.pop()\\r\\n * var param_3 = obj.top()\\r\\n * var param_4 = obj.empty()\\r\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class MyStack() {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    \\r\\n\\r\\n    /** Push element x onto stack. */\\r\\n    fun push(x: Int) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Removes the element on top of the stack and returns that element. */\\r\\n    fun pop(): Int {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Get the top element. */\\r\\n    fun top(): Int {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Returns whether the stack is empty. */\\r\\n    fun empty(): Boolean {\\r\\n        \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MyStack object will be instantiated and called as such:\\r\\n * var obj = MyStack()\\r\\n * obj.push(x)\\r\\n * var param_2 = obj.pop()\\r\\n * var param_3 = obj.top()\\r\\n * var param_4 = obj.empty()\\r\\n */\"}]", 
    "judgerAvailable": true, 
    "questionTitleSlug": "implement-stack-using-queues", 
    "similarQuestions": "[{\"title\": \"Implement Queue using Stacks\", \"titleSlug\": \"implement-queue-using-stacks\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]", 
    "libraryUrl": null, 
    "sessionId": "0", 
    "questionTitle": "Implement Stack using Queues", 
    "categoryTitle": "Algorithms", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }, 
  "loginUrl": "/accounts/login/", 
  "subscribeUrl": "/subscribe/"
}