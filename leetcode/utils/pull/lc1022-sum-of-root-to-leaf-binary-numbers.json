{
  "isCurrentUserAuthenticated": false,
  "question": {
    "questionId": "1079",
    "questionFrontendId": "1022",
    "questionTitle": "Sum of Root To Leaf Binary Numbers",
    "translatedTitle": null,
    "questionTitleSlug": "sum-of-root-to-leaf-binary-numbers",
    "content": "<p>Given a binary tree, each node has value <code>0</code>&nbsp;or <code>1</code>.&nbsp; Each root-to-leaf path represents a binary number starting with the most significant bit.&nbsp; For example, if the path is <code>0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1</code>, then this could represent <code>01101</code> in binary, which is <code>13</code>.</p>\r\n\r\n<p>For all leaves in the tree, consider the numbers represented by the path&nbsp;from the root to that leaf.</p>\r\n\r\n<p>Return the sum of these numbers.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><span id=\"example-output-1\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/04/sum-of-root-to-leaf-binary-numbers.png\" style=\"width: 304px; height: 200px;\" /></span></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,0,1,0,1,0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">22</span>\r\n<strong>Explanation: </strong>(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the tree is between <code>1</code> and <code>1000</code>.</li>\r\n\t<li>node.val is <code>0</code> or <code>1</code>.</li>\r\n\t<li>The answer will not exceed <code>2^31 - 1</code>.</li>\r\n</ol>\r\n",
    "translatedContent": null,
    "difficulty": "Easy",
    "allowDiscuss": true,
    "similarQuestions": "[]",
    "mysqlSchemas": [],
    "categoryTitle": "Algorithms",
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * struct TreeNode {\\r\\n *     int val;\\r\\n *     TreeNode *left;\\r\\n *     TreeNode *right;\\r\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\r\\n * };\\r\\n */\\r\\nclass Solution {\\r\\npublic:\\r\\n    int sumRootToLeaf(TreeNode* root) {\\r\\n        \\r\\n    }\\r\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * public class TreeNode {\\r\\n *     int val;\\r\\n *     TreeNode left;\\r\\n *     TreeNode right;\\r\\n *     TreeNode(int x) { val = x; }\\r\\n * }\\r\\n */\\r\\nclass Solution {\\r\\n    public int sumRootToLeaf(TreeNode root) {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\r\\n# class TreeNode(object):\\r\\n#     def __init__(self, x):\\r\\n#         self.val = x\\r\\n#         self.left = None\\r\\n#         self.right = None\\r\\n\\r\\nclass Solution(object):\\r\\n    def sumRootToLeaf(self, root):\\r\\n        \\\"\\\"\\\"\\r\\n        :type root: TreeNode\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\r\\n# class TreeNode:\\r\\n#     def __init__(self, x):\\r\\n#         self.val = x\\r\\n#         self.left = None\\r\\n#         self.right = None\\r\\n\\r\\nclass Solution:\\r\\n    def sumRootToLeaf(self, root: TreeNode) -> int:\\r\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\nint sumRootToLeaf(struct TreeNode* root) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * public class TreeNode {\\r\\n *     public int val;\\r\\n *     public TreeNode left;\\r\\n *     public TreeNode right;\\r\\n *     public TreeNode(int x) { val = x; }\\r\\n * }\\r\\n */\\r\\npublic class Solution {\\r\\n    public int SumRootToLeaf(TreeNode root) {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * function TreeNode(val) {\\r\\n *     this.val = val;\\r\\n *     this.left = this.right = null;\\r\\n * }\\r\\n */\\r\\n/**\\r\\n * @param {TreeNode} root\\r\\n * @return {number}\\r\\n */\\r\\nvar sumRootToLeaf = function(root) {\\r\\n    \\r\\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\r\\n# class TreeNode\\r\\n#     attr_accessor :val, :left, :right\\r\\n#     def initialize(val)\\r\\n#         @val = val\\r\\n#         @left, @right = nil, nil\\r\\n#     end\\r\\n# end\\r\\n\\r\\n# @param {TreeNode} root\\r\\n# @return {Integer}\\r\\ndef sum_root_to_leaf(root)\\r\\n    \\r\\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * public class TreeNode {\\r\\n *     public var val: Int\\r\\n *     public var left: TreeNode?\\r\\n *     public var right: TreeNode?\\r\\n *     public init(_ val: Int) {\\r\\n *         self.val = val\\r\\n *         self.left = nil\\r\\n *         self.right = nil\\r\\n *     }\\r\\n * }\\r\\n */\\r\\nclass Solution {\\r\\n    func sumRootToLeaf(_ root: TreeNode?) -> Int {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * type TreeNode struct {\\r\\n *     Val int\\r\\n *     Left *TreeNode\\r\\n *     Right *TreeNode\\r\\n * }\\r\\n */\\r\\nfunc sumRootToLeaf(root *TreeNode) int {\\r\\n    \\r\\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * class TreeNode(var _value: Int) {\\r\\n *   var value: Int = _value\\r\\n *   var left: TreeNode = null\\r\\n *   var right: TreeNode = null\\r\\n * }\\r\\n */\\r\\nobject Solution {\\r\\n    def sumRootToLeaf(root: TreeNode): Int = {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\r\\n * Example:\\r\\n * var ti = TreeNode(5)\\r\\n * var v = ti.`val`\\r\\n * Definition for a binary tree node.\\r\\n * class TreeNode(var `val`: Int) {\\r\\n *     var left: TreeNode? = null\\r\\n *     var right: TreeNode? = null\\r\\n * }\\r\\n */\\r\\nclass Solution {\\r\\n    fun sumRootToLeaf(root: TreeNode?): Int {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\r\\n// #[derive(Debug, PartialEq, Eq)]\\r\\n// pub struct TreeNode {\\r\\n//   pub val: i32,\\r\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\r\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\r\\n// }\\r\\n// \\r\\n// impl TreeNode {\\r\\n//   #[inline]\\r\\n//   pub fn new(val: i32) -> Self {\\r\\n//     TreeNode {\\r\\n//       val,\\r\\n//       left: None,\\r\\n//       right: None\\r\\n//     }\\r\\n//   }\\r\\n// }\\r\\nuse std::rc::Rc;\\r\\nuse std::cell::RefCell;\\r\\nimpl Solution {\\r\\n    pub fn sum_root_to_leaf(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * class TreeNode {\\r\\n *     public $val = null;\\r\\n *     public $left = null;\\r\\n *     public $right = null;\\r\\n *     function __construct($value) { $this->val = $value; }\\r\\n * }\\r\\n */\\r\\nclass Solution {\\r\\n\\r\\n    /**\\r\\n     * @param TreeNode $root\\r\\n     * @return Integer\\r\\n     */\\r\\n    function sumRootToLeaf($root) {\\r\\n        \\r\\n    }\\r\\n}\"}]",
    "metaData": "{\r\n  \"name\": \"sumRootToLeaf\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
    "infoVerified": false,
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 8.2</code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.18.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 10.15.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.5</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 4.2</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.11.4</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.6</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"], \"rust\": [\"Rust\", \"<p>Compiled with <code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}",
    "article": "{}",
    "questionDetailUrl": "/problems/sum-of-root-to-leaf-binary-numbers/",
    "libraryUrl": null,
    "topicTags": [
      {
        "name": "Tree",
        "slug": "tree",
        "translatedName": null
      }
    ]
  },
  "isPremium": false
}