{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "questionId": "859", 
    "questionDetailUrl": "/problems/design-circular-deque/", 
    "infoVerified": false, 
    "questionFrontendId": "641", 
    "questionTitleSlug": "design-circular-deque", 
    "similarQuestions": "[{\"title\": \"Design Circular Queue\", \"titleSlug\": \"design-circular-queue\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]", 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.10.3</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"]}", 
    "topicTags": [
      {
        "translatedName": null, 
        "name": "Design", 
        "slug": "design"
      }, 
      {
        "translatedName": null, 
        "name": "Queue", 
        "slug": "queue"
      }
    ], 
    "content": "<p>Design your implementation of the circular double-ended queue (deque).</p>\r\n\r\n<p>Your implementation should support following operations:</p>\r\n\r\n<ul>\r\n\t<li><code>MyCircularDeque(k)</code>: Constructor, set the size of the deque to be k.</li>\r\n\t<li><code>insertFront()</code>: Adds an item at the front of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>insertLast()</code>: Adds an item at the rear of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>deleteFront()</code>: Deletes an item from the front of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>deleteLast()</code>: Deletes an item from the rear of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>getFront()</code>: Gets the front item from the Deque. If the deque is empty, return -1.</li>\r\n\t<li><code>getRear()</code>: Gets the last item from Deque. If the deque is empty, return -1.</li>\r\n\t<li><code>isEmpty()</code>: Checks whether Deque is empty or not.&nbsp;</li>\r\n\t<li><code>isFull()</code>: Checks whether Deque is full or not.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nMyCircularDeque circularDeque = new MycircularDeque(3); // set the size to be 3\r\ncircularDeque.insertLast(1);\t\t\t// return true\r\ncircularDeque.insertLast(2);\t\t\t// return true\r\ncircularDeque.insertFront(3);\t\t\t// return true\r\ncircularDeque.insertFront(4);\t\t\t// return false, the queue is full\r\ncircularDeque.getRear();  \t\t\t// return 32\r\ncircularDeque.isFull();\t\t\t\t// return true\r\ncircularDeque.deleteLast();\t\t\t// return true\r\ncircularDeque.insertFront(4);\t\t\t// return true\r\ncircularDeque.getFront();\t\t\t// return 4\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All values will be in the range of [0, 1000].</li>\r\n\t<li>The number of operations will be in the range of&nbsp;[1, 1000].</li>\r\n\t<li>Please do not use the built-in Deque library.</li>\r\n</ul>\r\n", 
    "difficulty": "Medium", 
    "libraryUrl": null, 
    "questionTitle": "Design Circular Deque", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class MyCircularDeque {\\r\\npublic:\\r\\n    /** Initialize your data structure here. Set the size of the deque to be k. */\\r\\n    MyCircularDeque(int k) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\\r\\n    bool insertFront(int value) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\\r\\n    bool insertLast(int value) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\\r\\n    bool deleteFront() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\\r\\n    bool deleteLast() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Get the front item from the deque. */\\r\\n    int getFront() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Get the last item from the deque. */\\r\\n    int getRear() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Checks whether the circular deque is empty or not. */\\r\\n    bool isEmpty() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Checks whether the circular deque is full or not. */\\r\\n    bool isFull() {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * Your MyCircularDeque object will be instantiated and called as such:\\r\\n * MyCircularDeque obj = new MyCircularDeque(k);\\r\\n * bool param_1 = obj.insertFront(value);\\r\\n * bool param_2 = obj.insertLast(value);\\r\\n * bool param_3 = obj.deleteFront();\\r\\n * bool param_4 = obj.deleteLast();\\r\\n * int param_5 = obj.getFront();\\r\\n * int param_6 = obj.getRear();\\r\\n * bool param_7 = obj.isEmpty();\\r\\n * bool param_8 = obj.isFull();\\r\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class MyCircularDeque {\\r\\n\\r\\n    /** Initialize your data structure here. Set the size of the deque to be k. */\\r\\n    public MyCircularDeque(int k) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\\r\\n    public boolean insertFront(int value) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\\r\\n    public boolean insertLast(int value) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\\r\\n    public boolean deleteFront() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\\r\\n    public boolean deleteLast() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Get the front item from the deque. */\\r\\n    public int getFront() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Get the last item from the deque. */\\r\\n    public int getRear() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Checks whether the circular deque is empty or not. */\\r\\n    public boolean isEmpty() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Checks whether the circular deque is full or not. */\\r\\n    public boolean isFull() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MyCircularDeque object will be instantiated and called as such:\\r\\n * MyCircularDeque obj = new MyCircularDeque(k);\\r\\n * boolean param_1 = obj.insertFront(value);\\r\\n * boolean param_2 = obj.insertLast(value);\\r\\n * boolean param_3 = obj.deleteFront();\\r\\n * boolean param_4 = obj.deleteLast();\\r\\n * int param_5 = obj.getFront();\\r\\n * int param_6 = obj.getRear();\\r\\n * boolean param_7 = obj.isEmpty();\\r\\n * boolean param_8 = obj.isFull();\\r\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class MyCircularDeque(object):\\r\\n\\r\\n    def __init__(self, k):\\r\\n        \\\"\\\"\\\"\\r\\n        Initialize your data structure here. Set the size of the deque to be k.\\r\\n        :type k: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def insertFront(self, value):\\r\\n        \\\"\\\"\\\"\\r\\n        Adds an item at the front of Deque. Return true if the operation is successful.\\r\\n        :type value: int\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def insertLast(self, value):\\r\\n        \\\"\\\"\\\"\\r\\n        Adds an item at the rear of Deque. Return true if the operation is successful.\\r\\n        :type value: int\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def deleteFront(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Deletes an item from the front of Deque. Return true if the operation is successful.\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def deleteLast(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Deletes an item from the rear of Deque. Return true if the operation is successful.\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def getFront(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Get the front item from the deque.\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def getRear(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Get the last item from the deque.\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def isEmpty(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Checks whether the circular deque is empty or not.\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def isFull(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Checks whether the circular deque is full or not.\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your MyCircularDeque object will be instantiated and called as such:\\r\\n# obj = MyCircularDeque(k)\\r\\n# param_1 = obj.insertFront(value)\\r\\n# param_2 = obj.insertLast(value)\\r\\n# param_3 = obj.deleteFront()\\r\\n# param_4 = obj.deleteLast()\\r\\n# param_5 = obj.getFront()\\r\\n# param_6 = obj.getRear()\\r\\n# param_7 = obj.isEmpty()\\r\\n# param_8 = obj.isFull()\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class MyCircularDeque:\\r\\n\\r\\n    def __init__(self, k):\\r\\n        \\\"\\\"\\\"\\r\\n        Initialize your data structure here. Set the size of the deque to be k.\\r\\n        :type k: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def insertFront(self, value):\\r\\n        \\\"\\\"\\\"\\r\\n        Adds an item at the front of Deque. Return true if the operation is successful.\\r\\n        :type value: int\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def insertLast(self, value):\\r\\n        \\\"\\\"\\\"\\r\\n        Adds an item at the rear of Deque. Return true if the operation is successful.\\r\\n        :type value: int\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def deleteFront(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Deletes an item from the front of Deque. Return true if the operation is successful.\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def deleteLast(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Deletes an item from the rear of Deque. Return true if the operation is successful.\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def getFront(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Get the front item from the deque.\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def getRear(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Get the last item from the deque.\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def isEmpty(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Checks whether the circular deque is empty or not.\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def isFull(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Checks whether the circular deque is full or not.\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your MyCircularDeque object will be instantiated and called as such:\\r\\n# obj = MyCircularDeque(k)\\r\\n# param_1 = obj.insertFront(value)\\r\\n# param_2 = obj.insertLast(value)\\r\\n# param_3 = obj.deleteFront()\\r\\n# param_4 = obj.deleteLast()\\r\\n# param_5 = obj.getFront()\\r\\n# param_6 = obj.getRear()\\r\\n# param_7 = obj.isEmpty()\\r\\n# param_8 = obj.isFull()\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\\r\\n    \\r\\n} MyCircularDeque;\\r\\n\\r\\n/** Initialize your data structure here. Set the size of the deque to be k. */\\r\\nMyCircularDeque* myCircularDequeCreate(int k) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Adds an item at the front of Deque. Return true if the operation is successful. */\\r\\nbool myCircularDequeInsertFront(MyCircularDeque* obj, int value) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Adds an item at the rear of Deque. Return true if the operation is successful. */\\r\\nbool myCircularDequeInsertLast(MyCircularDeque* obj, int value) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Deletes an item from the front of Deque. Return true if the operation is successful. */\\r\\nbool myCircularDequeDeleteFront(MyCircularDeque* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Deletes an item from the rear of Deque. Return true if the operation is successful. */\\r\\nbool myCircularDequeDeleteLast(MyCircularDeque* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Get the front item from the deque. */\\r\\nint myCircularDequeGetFront(MyCircularDeque* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Get the last item from the deque. */\\r\\nint myCircularDequeGetRear(MyCircularDeque* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Checks whether the circular deque is empty or not. */\\r\\nbool myCircularDequeIsEmpty(MyCircularDeque* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Checks whether the circular deque is full or not. */\\r\\nbool myCircularDequeIsFull(MyCircularDeque* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid myCircularDequeFree(MyCircularDeque* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MyCircularDeque struct will be instantiated and called as such:\\r\\n * struct MyCircularDeque* obj = myCircularDequeCreate(k);\\r\\n * bool param_1 = myCircularDequeInsertFront(obj, value);\\r\\n * bool param_2 = myCircularDequeInsertLast(obj, value);\\r\\n * bool param_3 = myCircularDequeDeleteFront(obj);\\r\\n * bool param_4 = myCircularDequeDeleteLast(obj);\\r\\n * int param_5 = myCircularDequeGetFront(obj);\\r\\n * int param_6 = myCircularDequeGetRear(obj);\\r\\n * bool param_7 = myCircularDequeIsEmpty(obj);\\r\\n * bool param_8 = myCircularDequeIsFull(obj);\\r\\n * myCircularDequeFree(obj);\\r\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class MyCircularDeque {\\r\\n\\r\\n    /** Initialize your data structure here. Set the size of the deque to be k. */\\r\\n    public MyCircularDeque(int k) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\\r\\n    public bool InsertFront(int value) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\\r\\n    public bool InsertLast(int value) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\\r\\n    public bool DeleteFront() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\\r\\n    public bool DeleteLast() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Get the front item from the deque. */\\r\\n    public int GetFront() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Get the last item from the deque. */\\r\\n    public int GetRear() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Checks whether the circular deque is empty or not. */\\r\\n    public bool IsEmpty() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Checks whether the circular deque is full or not. */\\r\\n    public bool IsFull() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MyCircularDeque object will be instantiated and called as such:\\r\\n * MyCircularDeque obj = new MyCircularDeque(k);\\r\\n * bool param_1 = obj.InsertFront(value);\\r\\n * bool param_2 = obj.InsertLast(value);\\r\\n * bool param_3 = obj.DeleteFront();\\r\\n * bool param_4 = obj.DeleteLast();\\r\\n * int param_5 = obj.GetFront();\\r\\n * int param_6 = obj.GetRear();\\r\\n * bool param_7 = obj.IsEmpty();\\r\\n * bool param_8 = obj.IsFull();\\r\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * Initialize your data structure here. Set the size of the deque to be k.\\r\\n * @param {number} k\\r\\n */\\r\\nvar MyCircularDeque = function(k) {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Adds an item at the front of Deque. Return true if the operation is successful. \\r\\n * @param {number} value\\r\\n * @return {boolean}\\r\\n */\\r\\nMyCircularDeque.prototype.insertFront = function(value) {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Adds an item at the rear of Deque. Return true if the operation is successful. \\r\\n * @param {number} value\\r\\n * @return {boolean}\\r\\n */\\r\\nMyCircularDeque.prototype.insertLast = function(value) {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Deletes an item from the front of Deque. Return true if the operation is successful.\\r\\n * @return {boolean}\\r\\n */\\r\\nMyCircularDeque.prototype.deleteFront = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Deletes an item from the rear of Deque. Return true if the operation is successful.\\r\\n * @return {boolean}\\r\\n */\\r\\nMyCircularDeque.prototype.deleteLast = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Get the front item from the deque.\\r\\n * @return {number}\\r\\n */\\r\\nMyCircularDeque.prototype.getFront = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Get the last item from the deque.\\r\\n * @return {number}\\r\\n */\\r\\nMyCircularDeque.prototype.getRear = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Checks whether the circular deque is empty or not.\\r\\n * @return {boolean}\\r\\n */\\r\\nMyCircularDeque.prototype.isEmpty = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Checks whether the circular deque is full or not.\\r\\n * @return {boolean}\\r\\n */\\r\\nMyCircularDeque.prototype.isFull = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * Your MyCircularDeque object will be instantiated and called as such:\\r\\n * var obj = Object.create(MyCircularDeque).createNew(k)\\r\\n * var param_1 = obj.insertFront(value)\\r\\n * var param_2 = obj.insertLast(value)\\r\\n * var param_3 = obj.deleteFront()\\r\\n * var param_4 = obj.deleteLast()\\r\\n * var param_5 = obj.getFront()\\r\\n * var param_6 = obj.getRear()\\r\\n * var param_7 = obj.isEmpty()\\r\\n * var param_8 = obj.isFull()\\r\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class MyCircularDeque\\r\\n\\r\\n=begin\\r\\n    Initialize your data structure here. Set the size of the deque to be k.\\r\\n    :type k: Integer\\r\\n=end\\r\\n    def initialize(k)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Adds an item at the front of Deque. Return true if the operation is successful.\\r\\n    :type value: Integer\\r\\n    :rtype: Boolean\\r\\n=end\\r\\n    def insert_front(value)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Adds an item at the rear of Deque. Return true if the operation is successful.\\r\\n    :type value: Integer\\r\\n    :rtype: Boolean\\r\\n=end\\r\\n    def insert_last(value)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Deletes an item from the front of Deque. Return true if the operation is successful.\\r\\n    :rtype: Boolean\\r\\n=end\\r\\n    def delete_front()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Deletes an item from the rear of Deque. Return true if the operation is successful.\\r\\n    :rtype: Boolean\\r\\n=end\\r\\n    def delete_last()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Get the front item from the deque.\\r\\n    :rtype: Integer\\r\\n=end\\r\\n    def get_front()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Get the last item from the deque.\\r\\n    :rtype: Integer\\r\\n=end\\r\\n    def get_rear()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Checks whether the circular deque is empty or not.\\r\\n    :rtype: Boolean\\r\\n=end\\r\\n    def is_empty()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Checks whether the circular deque is full or not.\\r\\n    :rtype: Boolean\\r\\n=end\\r\\n    def is_full()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\nend\\r\\n\\r\\n# Your MyCircularDeque object will be instantiated and called as such:\\r\\n# obj = MyCircularDeque.new(k)\\r\\n# param_1 = obj.insert_front(value)\\r\\n# param_2 = obj.insert_last(value)\\r\\n# param_3 = obj.delete_front()\\r\\n# param_4 = obj.delete_last()\\r\\n# param_5 = obj.get_front()\\r\\n# param_6 = obj.get_rear()\\r\\n# param_7 = obj.is_empty()\\r\\n# param_8 = obj.is_full()\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type MyCircularDeque struct {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Initialize your data structure here. Set the size of the deque to be k. */\\r\\nfunc Constructor(k int) MyCircularDeque {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Adds an item at the front of Deque. Return true if the operation is successful. */\\r\\nfunc (this *MyCircularDeque) InsertFront(value int) bool {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Adds an item at the rear of Deque. Return true if the operation is successful. */\\r\\nfunc (this *MyCircularDeque) InsertLast(value int) bool {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Deletes an item from the front of Deque. Return true if the operation is successful. */\\r\\nfunc (this *MyCircularDeque) DeleteFront() bool {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Deletes an item from the rear of Deque. Return true if the operation is successful. */\\r\\nfunc (this *MyCircularDeque) DeleteLast() bool {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Get the front item from the deque. */\\r\\nfunc (this *MyCircularDeque) GetFront() int {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Get the last item from the deque. */\\r\\nfunc (this *MyCircularDeque) GetRear() int {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Checks whether the circular deque is empty or not. */\\r\\nfunc (this *MyCircularDeque) IsEmpty() bool {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Checks whether the circular deque is full or not. */\\r\\nfunc (this *MyCircularDeque) IsFull() bool {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * Your MyCircularDeque object will be instantiated and called as such:\\r\\n * obj := Constructor(k);\\r\\n * param_1 := obj.InsertFront(value);\\r\\n * param_2 := obj.InsertLast(value);\\r\\n * param_3 := obj.DeleteFront();\\r\\n * param_4 := obj.DeleteLast();\\r\\n * param_5 := obj.GetFront();\\r\\n * param_6 := obj.GetRear();\\r\\n * param_7 := obj.IsEmpty();\\r\\n * param_8 := obj.IsFull();\\r\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class MyCircularDeque(_k: Int) {\\r\\n\\r\\n    /** Initialize your data structure here. Set the size of the deque to be k. */\\r\\n    \\r\\n\\r\\n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\\r\\n    def insertFront(value: Int): Boolean = {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\\r\\n    def insertLast(value: Int): Boolean = {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\\r\\n    def deleteFront(): Boolean = {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\\r\\n    def deleteLast(): Boolean = {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Get the front item from the deque. */\\r\\n    def getFront(): Int = {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Get the last item from the deque. */\\r\\n    def getRear(): Int = {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Checks whether the circular deque is empty or not. */\\r\\n    def isEmpty(): Boolean = {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Checks whether the circular deque is full or not. */\\r\\n    def isFull(): Boolean = {\\r\\n        \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MyCircularDeque object will be instantiated and called as such:\\r\\n * var obj = new MyCircularDeque(k)\\r\\n * var param_1 = obj.insertFront(value)\\r\\n * var param_2 = obj.insertLast(value)\\r\\n * var param_3 = obj.deleteFront()\\r\\n * var param_4 = obj.deleteLast()\\r\\n * var param_5 = obj.getFront()\\r\\n * var param_6 = obj.getRear()\\r\\n * var param_7 = obj.isEmpty()\\r\\n * var param_8 = obj.isFull()\\r\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class MyCircularDeque(k: Int) {\\r\\n\\r\\n    /** Initialize your data structure here. Set the size of the deque to be k. */\\r\\n    \\r\\n\\r\\n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\\r\\n    fun insertFront(value: Int): Boolean {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\\r\\n    fun insertLast(value: Int): Boolean {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\\r\\n    fun deleteFront(): Boolean {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\\r\\n    fun deleteLast(): Boolean {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Get the front item from the deque. */\\r\\n    fun getFront(): Int {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Get the last item from the deque. */\\r\\n    fun getRear(): Int {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Checks whether the circular deque is empty or not. */\\r\\n    fun isEmpty(): Boolean {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Checks whether the circular deque is full or not. */\\r\\n    fun isFull(): Boolean {\\r\\n        \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MyCircularDeque object will be instantiated and called as such:\\r\\n * var obj = MyCircularDeque(k)\\r\\n * var param_1 = obj.insertFront(value)\\r\\n * var param_2 = obj.insertLast(value)\\r\\n * var param_3 = obj.deleteFront()\\r\\n * var param_4 = obj.deleteLast()\\r\\n * var param_5 = obj.getFront()\\r\\n * var param_6 = obj.getRear()\\r\\n * var param_7 = obj.isEmpty()\\r\\n * var param_8 = obj.isFull()\\r\\n */\"}]", 
    "contributors": "[{\"username\": \"tinylic\", \"profileUrl\": \"/tinylic/\"}]", 
    "categoryTitle": "Algorithms", 
    "article": "{}", 
    "allowDiscuss": true, 
    "metaData": "{\r\n    \"classname\": \"MyCircularDeque\",\r\n    \"maxbytesperline\": 400000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"k\"\r\n            }\r\n        ],\r\n        \"comment\": \"Initialize your data structure here. Set the size of the deque to be k.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"insertFront\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"value\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Adds an item at the front of Deque. Return true if the operation is successful.\"\r\n        },\r\n        {\r\n            \"name\" : \"insertLast\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"value\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Adds an item at the rear of Deque. Return true if the operation is successful.\"\r\n        },\r\n        {\r\n            \"name\" : \"deleteFront\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Deletes an item from the front of Deque. Return true if the operation is successful.\"\r\n        },\r\n        {\r\n            \"name\" : \"deleteLast\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Deletes an item from the rear of Deque. Return true if the operation is successful.\"\r\n        },\r\n        {\r\n            \"name\" : \"getFront\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"comment\": \"Get the front item from the deque.\"\r\n        },\r\n        {\r\n            \"name\" : \"getRear\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"comment\": \"Get the last item from the deque.\"\r\n        },\r\n        {\r\n            \"name\" : \"isEmpty\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Checks whether the circular deque is empty or not.\"\r\n        },\r\n        {\r\n            \"name\" : \"isFull\",\r\n            \"params\": [\r\n                \r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Checks whether the circular deque is full or not.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }
}