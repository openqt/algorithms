{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "sessionId": "0", 
    "sampleTestCase": "[\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]\n[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]", 
    "questionFrontendId": "146", 
    "contributors": "[]", 
    "randomQuestionUrl": "/problems/random-one-question/", 
    "enableSubmit": true, 
    "metaData": "{\r\n    \"classname\": \"LRUCache\",\r\n    \"maxbytesperline\": 200000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"capacity\"\r\n            }\r\n        ]\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"get\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"key\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            }\r\n        },\r\n        {\r\n            \"name\" : \"put\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"key\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"value\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            }\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}", 
    "questionDetailUrl": "/problems/lru-cache/", 
    "stats": "{\"totalAccepted\": \"182.8K\", \"totalSubmission\": \"895.1K\", \"acRate\": \"20.4%\"}", 
    "interpretUrl": "/problems/lru-cache/interpret_solution/", 
    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}", 
    "__typename": "QuestionNode", 
    "topicTags": [
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "slug": "design", 
        "name": "Design"
      }
    ], 
    "content": "<p>\r\nDesign and implement a data structure for <a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\" target=\"_blank\">Least Recently Used (LRU) cache</a>. It should support the following operations: <code>get</code> and <code>put</code>.\r\n</p>\r\n\r\n<p>\r\n<code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br>\r\n<code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.\r\n</p>\r\n\r\n<p><b>Follow up:</b><br />\r\nCould you do both operations in <b>O(1)</b> time complexity?</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nLRUCache cache = new LRUCache( 2 /* capacity */ );\r\n\r\ncache.put(1, 1);\r\ncache.put(2, 2);\r\ncache.get(1);       // returns 1\r\ncache.put(3, 3);    // evicts key 2\r\ncache.get(2);       // returns -1 (not found)\r\ncache.put(4, 4);    // evicts key 1\r\ncache.get(1);       // returns -1 (not found)\r\ncache.get(3);       // returns 3\r\ncache.get(4);       // returns 4\r\n</pre>\r\n</p>", 
    "enableTestMode": false, 
    "submitUrl": "/problems/lru-cache/submit/", 
    "questionId": "146", 
    "infoVerified": false, 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.10.3</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"]}", 
    "difficulty": "Hard", 
    "allowDiscuss": true, 
    "article": "{}", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class LRUCache {\\r\\npublic:\\r\\n    LRUCache(int capacity) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    int get(int key) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    void put(int key, int value) {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * Your LRUCache object will be instantiated and called as such:\\r\\n * LRUCache obj = new LRUCache(capacity);\\r\\n * int param_1 = obj.get(key);\\r\\n * obj.put(key,value);\\r\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class LRUCache {\\r\\n\\r\\n    public LRUCache(int capacity) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public int get(int key) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public void put(int key, int value) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your LRUCache object will be instantiated and called as such:\\r\\n * LRUCache obj = new LRUCache(capacity);\\r\\n * int param_1 = obj.get(key);\\r\\n * obj.put(key,value);\\r\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class LRUCache(object):\\r\\n\\r\\n    def __init__(self, capacity):\\r\\n        \\\"\\\"\\\"\\r\\n        :type capacity: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def get(self, key):\\r\\n        \\\"\\\"\\\"\\r\\n        :type key: int\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def put(self, key, value):\\r\\n        \\\"\\\"\\\"\\r\\n        :type key: int\\r\\n        :type value: int\\r\\n        :rtype: void\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your LRUCache object will be instantiated and called as such:\\r\\n# obj = LRUCache(capacity)\\r\\n# param_1 = obj.get(key)\\r\\n# obj.put(key,value)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class LRUCache:\\r\\n\\r\\n    def __init__(self, capacity):\\r\\n        \\\"\\\"\\\"\\r\\n        :type capacity: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def get(self, key):\\r\\n        \\\"\\\"\\\"\\r\\n        :type key: int\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def put(self, key, value):\\r\\n        \\\"\\\"\\\"\\r\\n        :type key: int\\r\\n        :type value: int\\r\\n        :rtype: void\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your LRUCache object will be instantiated and called as such:\\r\\n# obj = LRUCache(capacity)\\r\\n# param_1 = obj.get(key)\\r\\n# obj.put(key,value)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\\r\\n    \\r\\n} LRUCache;\\r\\n\\r\\nLRUCache* lRUCacheCreate(int capacity) {\\r\\n    \\r\\n}\\r\\n\\r\\nint lRUCacheGet(LRUCache* obj, int key) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid lRUCachePut(LRUCache* obj, int key, int value) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid lRUCacheFree(LRUCache* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/**\\r\\n * Your LRUCache struct will be instantiated and called as such:\\r\\n * struct LRUCache* obj = lRUCacheCreate(capacity);\\r\\n * int param_1 = lRUCacheGet(obj, key);\\r\\n * lRUCachePut(obj, key, value);\\r\\n * lRUCacheFree(obj);\\r\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class LRUCache {\\r\\n\\r\\n    public LRUCache(int capacity) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public int Get(int key) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public void Put(int key, int value) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your LRUCache object will be instantiated and called as such:\\r\\n * LRUCache obj = new LRUCache(capacity);\\r\\n * int param_1 = obj.Get(key);\\r\\n * obj.Put(key,value);\\r\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * @param {number} capacity\\r\\n */\\r\\nvar LRUCache = function(capacity) {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * @param {number} key\\r\\n * @return {number}\\r\\n */\\r\\nLRUCache.prototype.get = function(key) {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * @param {number} key \\r\\n * @param {number} value\\r\\n * @return {void}\\r\\n */\\r\\nLRUCache.prototype.put = function(key, value) {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * Your LRUCache object will be instantiated and called as such:\\r\\n * var obj = Object.create(LRUCache).createNew(capacity)\\r\\n * var param_1 = obj.get(key)\\r\\n * obj.put(key,value)\\r\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class LRUCache\\r\\n\\r\\n=begin\\r\\n    :type capacity: Integer\\r\\n=end\\r\\n    def initialize(capacity)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    :type key: Integer\\r\\n    :rtype: Integer\\r\\n=end\\r\\n    def get(key)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    :type key: Integer\\r\\n    :type value: Integer\\r\\n    :rtype: Void\\r\\n=end\\r\\n    def put(key, value)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\nend\\r\\n\\r\\n# Your LRUCache object will be instantiated and called as such:\\r\\n# obj = LRUCache.new(capacity)\\r\\n# param_1 = obj.get(key)\\r\\n# obj.put(key, value)\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type LRUCache struct {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc Constructor(capacity int) LRUCache {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc (this *LRUCache) Get(key int) int {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc (this *LRUCache) Put(key int, value int)  {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * Your LRUCache object will be instantiated and called as such:\\r\\n * obj := Constructor(capacity);\\r\\n * param_1 := obj.Get(key);\\r\\n * obj.Put(key,value);\\r\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class LRUCache(_capacity: Int) {\\n\\n    def get(key: Int): Int = {\\n        \\n    }\\n\\n    def put(key: Int, value: Int) {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = new LRUCache(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class LRUCache(capacity: Int) {\\n\\n    fun get(key: Int): Int {\\n        \\n    }\\n\\n    fun put(key: Int, value: Int) {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = LRUCache(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */\"}]", 
    "judgerAvailable": true, 
    "questionTitleSlug": "lru-cache", 
    "similarQuestions": "[{\"title\": \"LFU Cache\", \"titleSlug\": \"lfu-cache\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Design In-Memory File System\", \"titleSlug\": \"design-in-memory-file-system\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Design Compressed String Iterator\", \"titleSlug\": \"design-compressed-string-iterator\", \"difficulty\": \"Easy\", \"translatedTitle\": null}]", 
    "libraryUrl": null, 
    "enableRunCode": true, 
    "questionTitle": "LRU Cache", 
    "categoryTitle": "Algorithms", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }, 
  "loginUrl": "/accounts/login/", 
  "subscribeUrl": "/subscribe/"
}