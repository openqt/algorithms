{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "questionId": "385", 
    "questionDetailUrl": "/problems/mini-parser/", 
    "infoVerified": false, 
    "questionFrontendId": "385", 
    "questionTitleSlug": "mini-parser", 
    "similarQuestions": "[{\"title\": \"Flatten Nested List Iterator\", \"titleSlug\": \"flatten-nested-list-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Ternary Expression Parser\", \"titleSlug\": \"ternary-expression-parser\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Remove Comments\", \"titleSlug\": \"remove-comments\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]", 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 4.1.2</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.10.3</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"]}", 
    "topicTags": [
      {
        "translatedName": null, 
        "name": "String", 
        "slug": "string"
      }, 
      {
        "translatedName": null, 
        "name": "Stack", 
        "slug": "stack"
      }
    ], 
    "content": "<p>Given a nested list of integers represented as a string, implement a parser to deserialize it.</p>\r\n\r\n<p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p>\r\n\r\n<p><b>Note:</b>\r\nYou may assume that the string is well-formed:\r\n<ul>\r\n<li>String is non-empty.</li>\r\n<li>String does not contain white spaces.</li>\r\n<li>String contains only digits <code>0-9</code>, <code>[</code>, <code>-</code> <code>,</code>, <code>]</code>.</li>\r\n</ul>\r\n</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\nGiven s = \"324\",\r\n\r\nYou should return a NestedInteger object which contains a single integer 324.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\nGiven s = \"[123,[456,[789]]]\",\r\n\r\nReturn a NestedInteger object containing a nested list with 2 elements:\r\n\r\n1. An integer containing value 123.\r\n2. A nested list containing two elements:\r\n    i.  An integer containing value 456.\r\n    ii. A nested list with one element:\r\n         a. An integer containing value 789.\r\n</pre>\r\n</p>", 
    "difficulty": "Medium", 
    "libraryUrl": null, 
    "questionTitle": "Mini Parser", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\r\\n * // This is the interface that allows for creating nested lists.\\r\\n * // You should not implement it, or speculate about its implementation\\r\\n * class NestedInteger {\\r\\n *   public:\\r\\n *     // Constructor initializes an empty nested list.\\r\\n *     NestedInteger();\\r\\n *\\r\\n *     // Constructor initializes a single integer.\\r\\n *     NestedInteger(int value);\\r\\n *\\r\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\r\\n *     bool isInteger() const;\\r\\n *\\r\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\r\\n *     // The result is undefined if this NestedInteger holds a nested list\\r\\n *     int getInteger() const;\\r\\n *\\r\\n *     // Set this NestedInteger to hold a single integer.\\r\\n *     void setInteger(int value);\\r\\n *\\r\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\r\\n *     void add(const NestedInteger &ni);\\r\\n *\\r\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\r\\n *     // The result is undefined if this NestedInteger holds a single integer\\r\\n *     const vector<NestedInteger> &getList() const;\\r\\n * };\\r\\n */\\r\\nclass Solution {\\r\\npublic:\\r\\n    NestedInteger deserialize(string s) {\\r\\n        \\r\\n    }\\r\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * public interface NestedInteger {\\n *     // Constructor initializes an empty nested list.\\n *     public NestedInteger();\\n *\\n *     // Constructor initializes a single integer.\\n *     public NestedInteger(int value);\\n *\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     public boolean isInteger();\\n *\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // Return null if this NestedInteger holds a nested list\\n *     public Integer getInteger();\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     public void setInteger(int value);\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     public void add(NestedInteger ni);\\n *\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // Return null if this NestedInteger holds a single integer\\n *     public List<NestedInteger> getList();\\n * }\\n */\\nclass Solution {\\n    public NestedInteger deserialize(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# \\\"\\\"\\\"\\r\\n# This is the interface that allows for creating nested lists.\\r\\n# You should not implement it, or speculate about its implementation\\r\\n# \\\"\\\"\\\"\\r\\n#class NestedInteger(object):\\r\\n#    def __init__(self, value=None):\\r\\n#        \\\"\\\"\\\"\\r\\n#        If value is not specified, initializes an empty list.\\r\\n#        Otherwise initializes a single integer equal to value.\\r\\n#        \\\"\\\"\\\"\\r\\n#\\r\\n#    def isInteger(self):\\r\\n#        \\\"\\\"\\\"\\r\\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\\r\\n#        :rtype bool\\r\\n#        \\\"\\\"\\\"\\r\\n#\\r\\n#    def add(self, elem):\\r\\n#        \\\"\\\"\\\"\\r\\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\r\\n#        :rtype void\\r\\n#        \\\"\\\"\\\"\\r\\n#\\r\\n#    def setInteger(self, value):\\r\\n#        \\\"\\\"\\\"\\r\\n#        Set this NestedInteger to hold a single integer equal to value.\\r\\n#        :rtype void\\r\\n#        \\\"\\\"\\\"\\r\\n#\\r\\n#    def getInteger(self):\\r\\n#        \\\"\\\"\\\"\\r\\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\\r\\n#        Return None if this NestedInteger holds a nested list\\r\\n#        :rtype int\\r\\n#        \\\"\\\"\\\"\\r\\n#\\r\\n#    def getList(self):\\r\\n#        \\\"\\\"\\\"\\r\\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\\r\\n#        Return None if this NestedInteger holds a single integer\\r\\n#        :rtype List[NestedInteger]\\r\\n#        \\\"\\\"\\\"\\r\\n\\r\\nclass Solution(object):\\r\\n    def deserialize(self, s):\\r\\n        \\\"\\\"\\\"\\r\\n        :type s: str\\r\\n        :rtype: NestedInteger\\r\\n        \\\"\\\"\\\"\\r\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# \\\"\\\"\\\"\\n# This is the interface that allows for creating nested lists.\\n# You should not implement it, or speculate about its implementation\\n# \\\"\\\"\\\"\\n#class NestedInteger:\\n#    def __init__(self, value=None):\\n#        \\\"\\\"\\\"\\n#        If value is not specified, initializes an empty list.\\n#        Otherwise initializes a single integer equal to value.\\n#        \\\"\\\"\\\"\\n#\\n#    def isInteger(self):\\n#        \\\"\\\"\\\"\\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\\n#        :rtype bool\\n#        \\\"\\\"\\\"\\n#\\n#    def add(self, elem):\\n#        \\\"\\\"\\\"\\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n#        :rtype void\\n#        \\\"\\\"\\\"\\n#\\n#    def setInteger(self, value):\\n#        \\\"\\\"\\\"\\n#        Set this NestedInteger to hold a single integer equal to value.\\n#        :rtype void\\n#        \\\"\\\"\\\"\\n#\\n#    def getInteger(self):\\n#        \\\"\\\"\\\"\\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\\n#        Return None if this NestedInteger holds a nested list\\n#        :rtype int\\n#        \\\"\\\"\\\"\\n#\\n#    def getList(self):\\n#        \\\"\\\"\\\"\\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\\n#        Return None if this NestedInteger holds a single integer\\n#        :rtype List[NestedInteger]\\n#        \\\"\\\"\\\"\\n\\nclass Solution:\\n    def deserialize(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: NestedInteger\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\r\\n * *********************************************************************\\r\\n * // This is the interface that allows for creating nested lists.\\r\\n * // You should not implement it, or speculate about its implementation\\r\\n * *********************************************************************\\r\\n *\\r\\n * // Initializes an empty nested list and return a reference to the nested integer.\\r\\n * struct NestedInteger *NestedIntegerInit();\\r\\n *\\r\\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\\r\\n * bool NestedIntegerIsInteger(struct NestedInteger *);\\r\\n *\\r\\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\\r\\n * // The result is undefined if this NestedInteger holds a nested list\\r\\n * int NestedIntegerGetInteger(struct NestedInteger *);\\r\\n *\\r\\n * // Set this NestedInteger to hold a single integer.\\r\\n * void NestedIntegerSetInteger(struct NestedInteger *ni, int value);\\r\\n *\\r\\n * // Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\r\\n * void NestedIntegerAdd(struct NestedInteger *ni, struct NestedInteger *elem);\\r\\n *\\r\\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\\r\\n * // The result is undefined if this NestedInteger holds a single integer\\r\\n * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);\\r\\n *\\r\\n * // Return the nested list's size that this NestedInteger holds, if it holds a nested list\\r\\n * // The result is undefined if this NestedInteger holds a single integer\\r\\n * int NestedIntegerGetListSize(struct NestedInteger *);\\r\\n * };\\r\\n */\\r\\nstruct NestedInteger* deserialize(char* s) {\\r\\n    \\r\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\r\\n * // This is the interface that allows for creating nested lists.\\r\\n * // You should not implement it, or speculate about its implementation\\r\\n * interface NestedInteger {\\r\\n *\\r\\n *     // Constructor initializes an empty nested list.\\r\\n *     public NestedInteger();\\r\\n *\\r\\n *     // Constructor initializes a single integer.\\r\\n *     public NestedInteger(int value);\\r\\n *\\r\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\r\\n *     bool IsInteger();\\r\\n *\\r\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\r\\n *     // Return null if this NestedInteger holds a nested list\\r\\n *     int GetInteger();\\r\\n *\\r\\n *     // Set this NestedInteger to hold a single integer.\\r\\n *     public void SetInteger(int value);\\r\\n *\\r\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\r\\n *     public void Add(NestedInteger ni);\\r\\n *\\r\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\r\\n *     // Return null if this NestedInteger holds a single integer\\r\\n *     IList<NestedInteger> GetList();\\r\\n * }\\r\\n */\\r\\npublic class Solution {\\r\\n    public NestedInteger Deserialize(string s) {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * // This is the interface that allows for creating nested lists.\\r\\n * // You should not implement it, or speculate about its implementation\\r\\n * function NestedInteger() {\\r\\n *\\r\\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\\r\\n *     @return {boolean}\\r\\n *     this.isInteger = function() {\\r\\n *         ...\\r\\n *     };\\r\\n *\\r\\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\\r\\n *     Return null if this NestedInteger holds a nested list\\r\\n *     @return {integer}\\r\\n *     this.getInteger = function() {\\r\\n *         ...\\r\\n *     };\\r\\n *\\r\\n *     Set this NestedInteger to hold a single integer equal to value.\\r\\n *     @return {void}\\r\\n *     this.setInteger = function(value) {\\r\\n *         ...\\r\\n *     };\\r\\n *\\r\\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\r\\n *     @return {void}\\r\\n *     this.add = function(elem) {\\r\\n *         ...\\r\\n *     };\\r\\n *\\r\\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\\r\\n *     Return null if this NestedInteger holds a single integer\\r\\n *     @return {NestedInteger[]}\\r\\n *     this.getList = function() {\\r\\n *         ...\\r\\n *     };\\r\\n * };\\r\\n */\\r\\n/**\\r\\n * @param {string} s\\r\\n * @return {NestedInteger}\\r\\n */\\r\\nvar deserialize = function(s) {\\r\\n    \\r\\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# This is the interface that allows for creating nested lists.\\r\\n# You should not implement it, or speculate about its implementation\\r\\n#\\r\\n#class NestedInteger\\r\\n#    def is_integer()\\r\\n#        \\\"\\\"\\\"\\r\\n#        Return true if this NestedInteger holds a single integer, rather than a nested list.\\r\\n#        @return {Boolean}\\r\\n#        \\\"\\\"\\\"\\r\\n#\\r\\n#    def get_integer()\\r\\n#        \\\"\\\"\\\"\\r\\n#        Return the single integer that this NestedInteger holds, if it holds a single integer\\r\\n#        Return nil if this NestedInteger holds a nested list\\r\\n#        @return {Integer}\\r\\n#        \\\"\\\"\\\"\\r\\n#\\r\\n#    def set_integer(value)\\r\\n#        \\\"\\\"\\\"\\r\\n#        Set this NestedInteger to hold a single integer equal to value.\\r\\n#        @return {Void}\\r\\n#        \\\"\\\"\\\"\\r\\n#\\r\\n#    def add(elem)\\r\\n#        \\\"\\\"\\\"\\r\\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\r\\n#        @return {Void}\\r\\n#        \\\"\\\"\\\"\\r\\n#\\r\\n#    def get_list()\\r\\n#        \\\"\\\"\\\"\\r\\n#        Return the nested list that this NestedInteger holds, if it holds a nested list\\r\\n#        Return nil if this NestedInteger holds a single integer\\r\\n#        @return {NestedInteger[]}\\r\\n#        \\\"\\\"\\\"\\r\\n\\r\\n# @param {String} s\\r\\n# @return {NestedInteger}\\r\\ndef deserialize(s)\\r\\n    \\r\\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     public func isInteger() -> Bool\\n *\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // The result is undefined if this NestedInteger holds a nested list\\n *     public func getInteger() -> Int\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     public func setInteger(value: Int)\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     public func add(elem: NestedInteger)\\n *\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // The result is undefined if this NestedInteger holds a single integer\\n *     public func getList() -> [NestedInteger]\\n * }\\n */\\nclass Solution {\\n    func deserialize(_ s: String) -> NestedInteger {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\r\\n * // This is the interface that allows for creating nested lists.\\r\\n * // You should not implement it, or speculate about its implementation\\r\\n * type NestedInteger struct {\\r\\n * }\\r\\n *\\r\\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\\r\\n * func (n NestedInteger) IsInteger() bool {}\\r\\n *\\r\\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\\r\\n * // The result is undefined if this NestedInteger holds a nested list\\r\\n * // So before calling this method, you should have a check\\r\\n * func (n NestedInteger) GetInteger() int {}\\r\\n *\\r\\n * // Set this NestedInteger to hold a single integer.\\r\\n * func (n *NestedInteger) SetInteger(value int) {}\\r\\n *\\r\\n * // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\r\\n * func (n *NestedInteger) Add(elem NestedInteger) {}\\r\\n *\\r\\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\\r\\n * // The list length is zero if this NestedInteger holds a single integer\\r\\n * // You can access NestedInteger's List element directly if you want to modify it\\r\\n * func (n NestedInteger) GetList() []*NestedInteger {}\\r\\n */\\r\\nfunc deserialize(s string) *NestedInteger {\\r\\n    \\r\\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *\\n *   // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *   def isInteger: Boolean = {}\\n *\\n *   // Return the single integer that this NestedInteger holds, if it holds a single integer\\n *   def getInteger: Int = {}\\n *\\n *   // Set this NestedInteger to hold a single integer.\\n *   def setInteger(i: Int) = {}\\n *\\n *   // Return the nested list that this NestedInteger holds, if it holds a nested list\\n *   def getList = {}\\n *\\n *   // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *   def add(ni: NestedInteger) = {}\\n * }\\n */\\nobject Solution {\\n    def deserialize(s: String): NestedInteger = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *     // Constructor initializes an empty nested list.\\n *     constructor()\\n *\\n *     // Constructor initializes a single integer.\\n *     constructor(value: Int)\\n *\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     fun isInteger(): Boolean\\n *\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // Return null if this NestedInteger holds a nested list\\n *     fun getInteger(): Int?\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     fun setInteger(value: Int): Unit\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     fun add(ni: NestedInteger): Unit\\n *\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // Return null if this NestedInteger holds a single integer\\n *     fun getList(): List<NestedInteger>?\\n * }\\n */\\nclass Solution {\\n    fun deserialize(s: String): NestedInteger {\\n        \\n    }\\n}\"}]", 
    "contributors": "[]", 
    "categoryTitle": "Algorithms", 
    "article": "{}", 
    "allowDiscuss": true, 
    "metaData": "{\r\n  \"name\": \"deserialize\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"NestedInteger\"\r\n  }\r\n}", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }
}