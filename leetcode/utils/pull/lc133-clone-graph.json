{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "sessionId": "0", 
    "sampleTestCase": "{}", 
    "questionFrontendId": "133", 
    "contributors": "[]", 
    "randomQuestionUrl": "/problems/random-one-question/", 
    "enableSubmit": true, 
    "metaData": "{}", 
    "questionDetailUrl": "/problems/clone-graph/", 
    "stats": "{\"totalAccepted\": \"155.6K\", \"totalSubmission\": \"618.7K\", \"acRate\": \"25.2%\"}", 
    "interpretUrl": "/problems/clone-graph/interpret_solution/", 
    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}", 
    "__typename": "QuestionNode", 
    "topicTags": [
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "slug": "depth-first-search", 
        "name": "Depth-first Search"
      }, 
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "slug": "breadth-first-search", 
        "name": "Breadth-first Search"
      }, 
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "slug": "graph", 
        "name": "Graph"
      }
    ], 
    "content": "<p>\r\nClone an undirected graph. Each node in the graph contains a <code>label</code> and a list of its <code>neighbors</code>.\r\n</p>\r\n\r\n<div>\r\n<br>\r\n<b>OJ's undirected graph serialization:</b>\r\n\r\n<p>\r\nNodes are labeled uniquely.\r\n</p>\r\n\r\nWe use <code>#</code> as a separator for each node, and <code>,</code> as a separator for node label and each neighbor of the node.\r\n</p>\r\n\r\n\r\n<p>\r\nAs an example, consider the serialized graph <code><font color=\"red\">{<font color=\"black\">0</font>,1,2#</font><font color=\"blue\"><font color=\"black\">1</font>,2#</font><font color=\"green\"><font color=\"black\">2</font>,2}</font></code>.\r\n</p>\r\n\r\n<p>\r\nThe graph has a total of three nodes, and therefore contains three parts as separated by <code>#</code>.\r\n<ol>\r\n<li>First node is labeled as <code><font color=\"black\">0</font></code>. Connect node <code><font color=\"black\">0</font></code> to both nodes <code><font color=\"red\">1</font></code> and <code><font color=\"red\">2</font></code>.</li>\r\n<li>Second node is labeled as <code><font color=\"black\">1</font></code>. Connect node <code><font color=\"black\">1</font></code> to node <code><font color=\"blue\">2</font></code>.</li>\r\n<li>Third node is labeled as <code><font color=\"black\">2</font></code>. Connect node <code><font color=\"black\">2</font></code> to node <code><font color=\"green\">2</font></code> (itself), thus forming a self-cycle.</li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\nVisually, the graph looks like the following:\r\n<pre>\r\n       1\r\n      / \\\r\n     /   \\\r\n    0 --- 2\r\n         / \\\r\n         \\_/\r\n</pre>\r\n</p>\r\n\r\n</div>", 
    "enableTestMode": false, 
    "submitUrl": "/problems/clone-graph/submit/", 
    "questionId": "133", 
    "infoVerified": false, 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"]}", 
    "difficulty": "Medium", 
    "allowDiscuss": true, 
    "article": "{}", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\r\\n * Definition for undirected graph.\\r\\n * struct UndirectedGraphNode {\\r\\n *     int label;\\r\\n *     vector<UndirectedGraphNode *> neighbors;\\r\\n *     UndirectedGraphNode(int x) : label(x) {};\\r\\n * };\\r\\n */\\r\\nclass Solution {\\r\\npublic:\\r\\n    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {\\r\\n        \\r\\n    }\\r\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\r\\n * Definition for undirected graph.\\r\\n * class UndirectedGraphNode {\\r\\n *     int label;\\r\\n *     List<UndirectedGraphNode> neighbors;\\r\\n *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }\\r\\n * };\\r\\n */\\r\\npublic class Solution {\\r\\n    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a undirected graph node\\r\\n# class UndirectedGraphNode:\\r\\n#     def __init__(self, x):\\r\\n#         self.label = x\\r\\n#         self.neighbors = []\\r\\n\\r\\nclass Solution:\\r\\n    # @param node, a undirected graph node\\r\\n    # @return a undirected graph node\\r\\n    def cloneGraph(self, node):\\r\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\r\\n * #define NEIGHBORS_MAX_SIZE 100\\r\\n * struct UndirectedGraphNode {\\r\\n *     int label;\\r\\n *     struct UndirectedGraphNode *neighbors[NEIGHBORS_MAX_SIZE];\\r\\n *     int neighborsCount;\\r\\n * };\\r\\n */\\r\\nstruct UndirectedGraphNode *cloneGraph(struct UndirectedGraphNode *graph) {\\r\\n    \\r\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\r\\n * Definition for undirected graph.\\r\\n * public class UndirectedGraphNode {\\r\\n *     public int label;\\r\\n *     public IList<UndirectedGraphNode> neighbors;\\r\\n *     public UndirectedGraphNode(int x) { label = x; neighbors = new List<UndirectedGraphNode>(); }\\r\\n * };\\r\\n */\\r\\npublic class Solution {\\r\\n    public UndirectedGraphNode CloneGraph(UndirectedGraphNode node) {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * Definition for undirected graph.\\r\\n * function UndirectedGraphNode(label) {\\r\\n *     this.label = label;\\r\\n *     this.neighbors = [];   // Array of UndirectedGraphNode\\r\\n * }\\r\\n */\\r\\n\\r\\n/**\\r\\n * @param {UndirectedGraphNode} graph\\r\\n * @return {UndirectedGraphNode}\\r\\n */\\r\\nvar cloneGraph = function(graph) {\\r\\n    \\r\\n};\"}]", 
    "judgerAvailable": true, 
    "questionTitleSlug": "clone-graph", 
    "similarQuestions": "[{\"title\": \"Copy List with Random Pointer\", \"titleSlug\": \"copy-list-with-random-pointer\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]", 
    "libraryUrl": null, 
    "enableRunCode": false, 
    "questionTitle": "Clone Graph", 
    "categoryTitle": "Algorithms", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }, 
  "loginUrl": "/accounts/login/", 
  "subscribeUrl": "/subscribe/"
}