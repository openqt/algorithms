{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "questionId": "1023", 
    "questionDetailUrl": "/problems/time-based-key-value-store/", 
    "infoVerified": false, 
    "questionFrontendId": "981", 
    "questionTitleSlug": "time-based-key-value-store", 
    "similarQuestions": "[]", 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 8.2</code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.18.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 10.15.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.5</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 4.2</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.11.4</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.6</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"], \"rust\": [\"Rust\", \"<p>Compiled with <code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}", 
    "topicTags": [
      {
        "translatedName": null, 
        "name": "Hash Table", 
        "slug": "hash-table"
      }, 
      {
        "translatedName": null, 
        "name": "Binary Search", 
        "slug": "binary-search"
      }
    ], 
    "content": "<p>Create a timebased key-value store class&nbsp;<code>TimeMap</code>, that supports two operations.</p>\r\n\r\n<p>1. <code>set(string key, string value, int timestamp)</code></p>\r\n\r\n<ul>\r\n\t<li>Stores the <code>key</code> and <code>value</code>, along with the given <code>timestamp</code>.</li>\r\n</ul>\r\n\r\n<p>2. <code>get(string key, int timestamp)</code></p>\r\n\r\n<ul>\r\n\t<li>Returns a value such that <code>set(key, value, timestamp_prev)</code> was called previously, with <code>timestamp_prev &lt;= timestamp</code>.</li>\r\n\t<li>If there are multiple such values, it returns the one with the largest <code>timestamp_prev</code>.</li>\r\n\t<li>If there are no values, it returns the empty string (<code>&quot;&quot;</code>).</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-1-1\">[&quot;TimeMap&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;]</span>, inputs = <span id=\"example-input-1-2\">[[],[&quot;foo&quot;,&quot;bar&quot;,1],[&quot;foo&quot;,1],[&quot;foo&quot;,3],[&quot;foo&quot;,&quot;bar2&quot;,4],[&quot;foo&quot;,4],[&quot;foo&quot;,5]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,null,&quot;bar&quot;,&quot;bar&quot;,null,&quot;bar2&quot;,&quot;bar2&quot;]</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">&nbsp; \r\nTimeMap kv; &nbsp; \r\nkv.set(&quot;foo&quot;, &quot;bar&quot;, 1); // store the key &quot;foo&quot; and value &quot;bar&quot; along with timestamp = 1 &nbsp; \r\nkv.get(&quot;foo&quot;, 1);  // output &quot;bar&quot; &nbsp; \r\nkv.get(&quot;foo&quot;, 3); // output &quot;bar&quot; since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie &quot;bar&quot; &nbsp; \r\nkv.set(&quot;foo&quot;, &quot;bar2&quot;, 4); &nbsp; \r\nkv.get(&quot;foo&quot;, 4); // output &quot;bar2&quot; &nbsp; \r\nkv.get(&quot;foo&quot;, 5); //output &quot;bar2&quot; &nbsp; \r\n</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-2-1\">[&quot;TimeMap&quot;,&quot;set&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;]</span>, inputs = <span id=\"example-input-2-2\">[[],[&quot;love&quot;,&quot;high&quot;,10],[&quot;love&quot;,&quot;low&quot;,20],[&quot;love&quot;,5],[&quot;love&quot;,10],[&quot;love&quot;,15],[&quot;love&quot;,20],[&quot;love&quot;,25]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,null,null,&quot;&quot;,&quot;high&quot;,&quot;high&quot;,&quot;low&quot;,&quot;low&quot;]</span>\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>All key/value strings are lowercase.</li>\r\n\t<li>All key/value strings have&nbsp;length in the range&nbsp;<code>[1, 100]</code></li>\r\n\t<li>The <code>timestamps</code> for all <code>TimeMap.set</code> operations are strictly increasing.</li>\r\n\t<li><code>1 &lt;= timestamp &lt;= 10^7</code></li>\r\n\t<li><code>TimeMap.set</code> and <code>TimeMap.get</code>&nbsp;functions will be called a total of <code>120000</code> times (combined) per test case.</li>\r\n</ol>\r\n", 
    "difficulty": "Medium", 
    "libraryUrl": null, 
    "questionTitle": "Time Based Key-Value Store", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class TimeMap {\\r\\npublic:\\r\\n    /** Initialize your data structure here. */\\r\\n    TimeMap() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    void set(string key, string value, int timestamp) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    string get(string key, int timestamp) {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * Your TimeMap object will be instantiated and called as such:\\r\\n * TimeMap* obj = new TimeMap();\\r\\n * obj->set(key,value,timestamp);\\r\\n * string param_2 = obj->get(key,timestamp);\\r\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class TimeMap {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    public TimeMap() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public void set(String key, String value, int timestamp) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public String get(String key, int timestamp) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your TimeMap object will be instantiated and called as such:\\r\\n * TimeMap obj = new TimeMap();\\r\\n * obj.set(key,value,timestamp);\\r\\n * String param_2 = obj.get(key,timestamp);\\r\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class TimeMap(object):\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def set(self, key, value, timestamp):\\n        \\\"\\\"\\\"\\n        :type key: str\\n        :type value: str\\n        :type timestamp: int\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n    def get(self, key, timestamp):\\n        \\\"\\\"\\\"\\n        :type key: str\\n        :type timestamp: int\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your TimeMap object will be instantiated and called as such:\\n# obj = TimeMap()\\n# obj.set(key,value,timestamp)\\n# param_2 = obj.get(key,timestamp)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class TimeMap:\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def set(self, key: str, value: str, timestamp: int) -> None:\\n        \\n\\n    def get(self, key: str, timestamp: int) -> str:\\n        \\n\\n\\n# Your TimeMap object will be instantiated and called as such:\\n# obj = TimeMap()\\n# obj.set(key,value,timestamp)\\n# param_2 = obj.get(key,timestamp)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\\r\\n    \\r\\n} TimeMap;\\r\\n\\r\\n/** Initialize your data structure here. */\\r\\nTimeMap* timeMapCreate(int maxSize) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid timeMapSet(TimeMap* obj, char* key, char* value, int timestamp) {\\r\\n    \\r\\n}\\r\\n\\r\\nchar* timeMapGet(TimeMap* obj, char* key, int timestamp) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid timeMapFree(TimeMap* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/**\\r\\n * Your TimeMap struct will be instantiated and called as such:\\r\\n * struct TimeMap* obj = timeMapCreate(maxSize);\\r\\n * timeMapSet(obj, key, value, timestamp);\\r\\n * char* param_2 = timeMapGet(obj, key, timestamp);\\r\\n * timeMapFree(obj);\\r\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class TimeMap {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    public TimeMap() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public void Set(string key, string value, int timestamp) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public string Get(string key, int timestamp) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your TimeMap object will be instantiated and called as such:\\r\\n * TimeMap obj = new TimeMap();\\r\\n * obj.Set(key,value,timestamp);\\r\\n * string param_2 = obj.Get(key,timestamp);\\r\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Initialize your data structure here.\\n */\\nvar TimeMap = function() {\\n    \\n};\\n\\n/** \\n * @param {string} key \\n * @param {string} value \\n * @param {number} timestamp\\n * @return {void}\\n */\\nTimeMap.prototype.set = function(key, value, timestamp) {\\n    \\n};\\n\\n/** \\n * @param {string} key \\n * @param {number} timestamp\\n * @return {string}\\n */\\nTimeMap.prototype.get = function(key, timestamp) {\\n    \\n};\\n\\n/** \\n * Your TimeMap object will be instantiated and called as such:\\n * var obj = Object.create(TimeMap).createNew()\\n * obj.set(key,value,timestamp)\\n * var param_2 = obj.get(key,timestamp)\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class TimeMap\\n\\n=begin\\n    Initialize your data structure here.\\n=end\\n    def initialize()\\n        \\n    end\\n\\n\\n=begin\\n    :type key: String\\n    :type value: String\\n    :type timestamp: Integer\\n    :rtype: Void\\n=end\\n    def set(key, value, timestamp)\\n        \\n    end\\n\\n\\n=begin\\n    :type key: String\\n    :type timestamp: Integer\\n    :rtype: String\\n=end\\n    def get(key, timestamp)\\n        \\n    end\\n\\n\\nend\\n\\n# Your TimeMap object will be instantiated and called as such:\\n# obj = TimeMap.new()\\n# obj.set(key, value, timestamp)\\n# param_2 = obj.get(key, timestamp)\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\r\\nclass TimeMap {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    init() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    func set(_ key: String, _ value: String, _ timestamp: Int) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    func get(_ key: String, _ timestamp: Int) -> String {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your TimeMap object will be instantiated and called as such:\\r\\n * let obj = TimeMap()\\r\\n * obj.set(key, value, timestamp)\\r\\n * let ret_2: String = obj.get(key, timestamp)\\r\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type TimeMap struct {\\n    \\n}\\n\\n\\n/** Initialize your data structure here. */\\nfunc Constructor() TimeMap {\\n    \\n}\\n\\n\\nfunc (this *TimeMap) Set(key string, value string, timestamp int)  {\\n    \\n}\\n\\n\\nfunc (this *TimeMap) Get(key string, timestamp int) string {\\n    \\n}\\n\\n\\n/**\\n * Your TimeMap object will be instantiated and called as such:\\n * obj := Constructor();\\n * obj.Set(key,value,timestamp);\\n * param_2 := obj.Get(key,timestamp);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class TimeMap() {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    \\r\\n\\r\\n    def set(key: String, value: String, timestamp: Int) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    def get(key: String, timestamp: Int): String = {\\r\\n        \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your TimeMap object will be instantiated and called as such:\\r\\n * var obj = new TimeMap()\\r\\n * obj.set(key,value,timestamp)\\r\\n * var param_2 = obj.get(key,timestamp)\\r\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class TimeMap() {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    \\r\\n\\r\\n    fun set(key: String, value: String, timestamp: Int) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    fun get(key: String, timestamp: Int): String {\\r\\n        \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your TimeMap object will be instantiated and called as such:\\r\\n * var obj = TimeMap()\\r\\n * obj.set(key,value,timestamp)\\r\\n * var param_2 = obj.get(key,timestamp)\\r\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct TimeMap {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/** \\r\\n * `&self` means the method takes an immutable reference.\\r\\n * If you need a mutable reference, change it to `&mut self` instead.\\r\\n */\\r\\nimpl TimeMap {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    fn new() -> Self {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    fn set(&self, key: String, value: String, timestamp: i32) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    fn get(&self, key: String, timestamp: i32) -> String {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your TimeMap object will be instantiated and called as such:\\r\\n * let obj = TimeMap::new();\\r\\n * obj.set(key, value, timestamp);\\r\\n * let ret_2: String = obj.get(key, timestamp);\\r\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class TimeMap {\\r\\n    /**\\r\\n     * Initialize your data structure here.\\r\\n     */\\r\\n    function __construct() {\\r\\n        \\r\\n    }\\r\\n  \\r\\n    /**\\r\\n     * @param String $key\\r\\n     * @param String $value\\r\\n     * @param Integer $timestamp\\r\\n     * @return NULL\\r\\n     */\\r\\n    function set($key, $value, $timestamp) {\\r\\n        \\r\\n    }\\r\\n  \\r\\n    /**\\r\\n     * @param String $key\\r\\n     * @param Integer $timestamp\\r\\n     * @return String\\r\\n     */\\r\\n    function get($key, $timestamp) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your TimeMap object will be instantiated and called as such:\\r\\n * $obj = TimeMap();\\r\\n * $obj->set($key, $value, $timestamp);\\r\\n * $ret_2 = $obj->get($key, $timestamp);\\r\\n */\"}]", 
    "categoryTitle": "Algorithms", 
    "article": "{\"id\": 677, \"url\": \"/articles/time-based-key-value-store/\", \"topicId\": 226609}", 
    "allowDiscuss": true, 
    "metaData": "{\r\n  \"classname\": \"TimeMap\",\r\n  \"maxbytesperline\": 130000,\r\n  \"constructor\": {\r\n      \"params\": [\r\n        {\r\n            \"type\": \"integer\",\r\n            \"name\": \"maxSize\",\r\n            \"lang\": \"c\",\r\n            \"value\": \"64000\"\r\n        }\r\n      ],\r\n      \"comment\": \"Initialize your data structure here.\"\r\n  },\r\n  \"methods\": [\r\n      { \"name\" : \"set\",\r\n        \"params\": [\r\n            {\r\n                \"type\": \"string\",\r\n                \"name\": \"key\"\r\n            },\r\n            {\r\n                \"type\": \"string\",\r\n                \"name\": \"value\"\r\n            },\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"timestamp\"\r\n            }\r\n        ],\r\n        \"return\": {\r\n            \"type\": \"void\"\r\n        }\r\n      },\r\n      { \"name\": \"get\",\r\n        \"params\": [\r\n            {\r\n                \"type\": \"string\",\r\n                \"name\": \"key\"\r\n            },\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"timestamp\"\r\n            }\r\n            ],\r\n        \"return\": {\r\n            \"type\": \"string\"\r\n        }\r\n      }\r\n  ],\r\n  \"systemdesign\": true,\r\n  \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }
}