{
  "isCurrentUserAuthenticated": false,
  "question": {
    "questionId": "1097",
    "questionFrontendId": "1032",
    "questionTitle": "Stream of Characters",
    "translatedTitle": null,
    "questionTitleSlug": "stream-of-characters",
    "content": "<p>Implement the <code>StreamChecker</code> class as follows:</p>\r\n\r\n<ul>\r\n\t<li><code>StreamChecker(words)</code>: Constructor, init the data structure with the given words.</li>\r\n\t<li><code>query(letter)</code>: returns true if and only if for some <code>k &gt;= 1</code>, the last <code>k</code>&nbsp;characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nStreamChecker streamChecker = new StreamChecker([&quot;cd&quot;,&quot;f&quot;,&quot;kl&quot;]); // init the dictionary.\r\nstreamChecker.query(&#39;a&#39;);          // return false\r\nstreamChecker.query(&#39;b&#39;);          // return false\r\nstreamChecker.query(&#39;c&#39;);          // return false\r\nstreamChecker.query(&#39;d&#39;);          // return true, because &#39;cd&#39; is in the wordlist\r\nstreamChecker.query(&#39;e&#39;);          // return false\r\nstreamChecker.query(&#39;f&#39;);          // return true, because &#39;f&#39; is in the wordlist\r\nstreamChecker.query(&#39;g&#39;);          // return false\r\nstreamChecker.query(&#39;h&#39;);          // return false\r\nstreamChecker.query(&#39;i&#39;);          // return false\r\nstreamChecker.query(&#39;j&#39;);          // return false\r\nstreamChecker.query(&#39;k&#39;);          // return false\r\nstreamChecker.query(&#39;l&#39;);          // return true, because &#39;kl&#39; is in the wordlist\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= words.length &lt;= 2000</code></li>\r\n\t<li><code>1 &lt;= words[i].length &lt;= 2000</code></li>\r\n\t<li>Words will only consist of lowercase English letters.</li>\r\n\t<li>Queries will only consist of lowercase English letters.</li>\r\n\t<li>The number of queries is at most&nbsp;40000.</li>\r\n</ul>\r\n",
    "translatedContent": null,
    "difficulty": "Hard",
    "allowDiscuss": true,
    "similarQuestions": "[]",
    "mysqlSchemas": [],
    "categoryTitle": "Algorithms",
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class StreamChecker {\\r\\npublic:\\r\\n    StreamChecker(vector<string>& words) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    bool query(char letter) {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * Your StreamChecker object will be instantiated and called as such:\\r\\n * StreamChecker* obj = new StreamChecker(words);\\r\\n * bool param_1 = obj->query(letter);\\r\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class StreamChecker {\\r\\n\\r\\n    public StreamChecker(String[] words) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public boolean query(char letter) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your StreamChecker object will be instantiated and called as such:\\r\\n * StreamChecker obj = new StreamChecker(words);\\r\\n * boolean param_1 = obj.query(letter);\\r\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class StreamChecker(object):\\r\\n\\r\\n    def __init__(self, words):\\r\\n        \\\"\\\"\\\"\\r\\n        :type words: List[str]\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def query(self, letter):\\r\\n        \\\"\\\"\\\"\\r\\n        :type letter: str\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your StreamChecker object will be instantiated and called as such:\\r\\n# obj = StreamChecker(words)\\r\\n# param_1 = obj.query(letter)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class StreamChecker:\\r\\n\\r\\n    def __init__(self, words: List[str]):\\r\\n        \\r\\n\\r\\n    def query(self, letter: str) -> bool:\\r\\n        \\r\\n\\r\\n\\r\\n# Your StreamChecker object will be instantiated and called as such:\\r\\n# obj = StreamChecker(words)\\r\\n# param_1 = obj.query(letter)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\\r\\n    \\r\\n} StreamChecker;\\r\\n\\r\\nStreamChecker* streamCheckerCreate(char** words) {\\r\\n    \\r\\n}\\r\\n\\r\\nbool streamCheckerQuery(StreamChecker* obj, char letter) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid streamCheckerFree(StreamChecker* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/**\\r\\n * Your StreamChecker struct will be instantiated and called as such:\\r\\n * struct StreamChecker* obj = streamCheckerCreate(words);\\r\\n * bool param_1 = streamCheckerQuery(obj, letter);\\r\\n * streamCheckerFree(obj);\\r\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class StreamChecker {\\r\\n\\r\\n    public StreamChecker(string[] words) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public bool Query(char letter) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your StreamChecker object will be instantiated and called as such:\\r\\n * StreamChecker obj = new StreamChecker(words);\\r\\n * bool param_1 = obj.Query(letter);\\r\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * @param {string[]} words\\r\\n */\\r\\nvar StreamChecker = function(words) {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * @param {character} letter\\r\\n * @return {boolean}\\r\\n */\\r\\nStreamChecker.prototype.query = function(letter) {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * Your StreamChecker object will be instantiated and called as such:\\r\\n * var obj = new StreamChecker(words)\\r\\n * var param_1 = obj.query(letter)\\r\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class StreamChecker\\r\\n\\r\\n=begin\\r\\n    :type words: String[]\\r\\n=end\\r\\n    def initialize(words)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    :type letter: Character\\r\\n    :rtype: Boolean\\r\\n=end\\r\\n    def query(letter)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\nend\\r\\n\\r\\n# Your StreamChecker object will be instantiated and called as such:\\r\\n# obj = StreamChecker.new(words)\\r\\n# param_1 = obj.query(letter)\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\r\\nclass StreamChecker {\\r\\n\\r\\n    init(_ words: [String]) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    func query(_ letter: Character) -> Bool {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your StreamChecker object will be instantiated and called as such:\\r\\n * let obj = StreamChecker(words)\\r\\n * let ret_1: Bool = obj.query(letter)\\r\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type StreamChecker struct {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc Constructor(words []string) StreamChecker {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc (this *StreamChecker) Query(letter byte) bool {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * Your StreamChecker object will be instantiated and called as such:\\r\\n * obj := Constructor(words);\\r\\n * param_1 := obj.Query(letter);\\r\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class StreamChecker(_words: Array[String]) {\\r\\n\\r\\n    def query(letter: Char): Boolean = {\\r\\n        \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your StreamChecker object will be instantiated and called as such:\\r\\n * var obj = new StreamChecker(words)\\r\\n * var param_1 = obj.query(letter)\\r\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class StreamChecker(words: Array<String>) {\\r\\n\\r\\n    fun query(letter: Char): Boolean {\\r\\n        \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your StreamChecker object will be instantiated and called as such:\\r\\n * var obj = StreamChecker(words)\\r\\n * var param_1 = obj.query(letter)\\r\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct StreamChecker {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/** \\r\\n * `&self` means the method takes an immutable reference.\\r\\n * If you need a mutable reference, change it to `&mut self` instead.\\r\\n */\\r\\nimpl StreamChecker {\\r\\n\\r\\n    fn new(words: Vec<String>) -> Self {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    fn query(&self, letter: char) -> bool {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your StreamChecker object will be instantiated and called as such:\\r\\n * let obj = StreamChecker::new(words);\\r\\n * let ret_1: bool = obj.query(letter);\\r\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class StreamChecker {\\r\\n    /**\\r\\n     * @param String[] $words\\r\\n     */\\r\\n    function __construct($words) {\\r\\n        \\r\\n    }\\r\\n  \\r\\n    /**\\r\\n     * @param String $letter\\r\\n     * @return Boolean\\r\\n     */\\r\\n    function query($letter) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your StreamChecker object will be instantiated and called as such:\\r\\n * $obj = StreamChecker($words);\\r\\n * $ret_1 = $obj->query($letter);\\r\\n */\"}]",
    "metaData": "{\r\n    \"classname\": \"StreamChecker\",\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"type\": \"string[]\",\r\n                \"name\": \"words\"\r\n            }]\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"query\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"character\",\r\n                    \"name\": \"letter\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            }\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"starts\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"ends\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<boolean>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
    "infoVerified": false,
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 8.2</code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.18.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 10.15.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.5</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 4.2</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.11.4</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.6</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"], \"rust\": [\"Rust\", \"<p>Compiled with <code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}",
    "article": "{}",
    "questionDetailUrl": "/problems/stream-of-characters/",
    "libraryUrl": null,
    "topicTags": [
      {
        "name": "Trie",
        "slug": "trie",
        "translatedName": null
      }
    ]
  },
  "isPremium": false
}