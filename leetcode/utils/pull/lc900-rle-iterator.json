{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "questionId": "936", 
    "questionDetailUrl": "/problems/rle-iterator/", 
    "infoVerified": false, 
    "questionFrontendId": "900", 
    "questionTitleSlug": "rle-iterator", 
    "similarQuestions": "[]", 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 4.2</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.10.3</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"]}", 
    "topicTags": [
      {
        "translatedName": null, 
        "name": "Array", 
        "slug": "array"
      }
    ], 
    "content": "<p>Write an iterator that iterates through a run-length encoded sequence.</p>\r\n\r\n<p>The iterator is initialized by <code>RLEIterator(int[] A)</code>, where <code>A</code> is a run-length encoding of some&nbsp;sequence.&nbsp; More specifically,&nbsp;for all even <code>i</code>,&nbsp;<code>A[i]</code> tells us the number of times that the non-negative integer value <code>A[i+1]</code> is repeated in the sequence.</p>\r\n\r\n<p>The iterator supports one function:&nbsp;<code>next(int n)</code>, which exhausts the next <code>n</code> elements&nbsp;(<code>n &gt;= 1</code>) and returns the last element exhausted in this way.&nbsp; If there is no element left to exhaust, <code>next</code>&nbsp;returns <code>-1</code> instead.</p>\r\n\r\n<p>For example, we start with <code>A = [3,8,0,9,2,5]</code>, which is a run-length encoding of the sequence <code>[8,8,8,5,5]</code>.&nbsp; This is because the sequence can be read as&nbsp;&quot;three eights, zero nines, two fives&quot;.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;RLEIterator&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;]</span>, <span id=\"example-input-1-2\">[[[3,8,0,9,2,5]],[2],[1],[1],[2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,8,8,5,-1]</span>\r\n<strong>Explanation: </strong>\r\nRLEIterator is initialized with RLEIterator([3,8,0,9,2,5]).\r\nThis maps to the sequence [8,8,8,5,5].\r\nRLEIterator.next is then called 4 times:\r\n\r\n.next(2) exhausts 2 terms of the sequence, returning 8.  The remaining sequence is now [8, 5, 5].\r\n\r\n.next(1) exhausts 1 term of the sequence, returning 8.  The remaining sequence is now [5, 5].\r\n\r\n.next(1) exhausts 1 term of the sequence, returning 5.  The remaining sequence is now [5].\r\n\r\n.next(2) exhausts 2 terms, returning -1.  This is because the first term exhausted was 5,\r\nbut the second term did not exist.  Since the last term exhausted does not exist, we return -1.\r\n\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt;= 1000</code></li>\r\n\t<li><code>A.length</code>&nbsp;is an even integer.</li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\r\n\t<li>There are at most <code>1000</code> calls to <code>RLEIterator.next(int n)</code> per test case.</li>\r\n\t<li>Each call to&nbsp;<code>RLEIterator.next(int n)</code>&nbsp;will have <code>1 &lt;= n &lt;= 10^9</code>.</li>\r\n</ol>\r\n", 
    "difficulty": "Medium", 
    "libraryUrl": null, 
    "questionTitle": "RLE Iterator", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class RLEIterator {\\r\\npublic:\\r\\n    RLEIterator(vector<int> A) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    int next(int n) {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * Your RLEIterator object will be instantiated and called as such:\\r\\n * RLEIterator obj = new RLEIterator(A);\\r\\n * int param_1 = obj.next(n);\\r\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class RLEIterator {\\r\\n\\r\\n    public RLEIterator(int[] A) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public int next(int n) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your RLEIterator object will be instantiated and called as such:\\r\\n * RLEIterator obj = new RLEIterator(A);\\r\\n * int param_1 = obj.next(n);\\r\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class RLEIterator(object):\\r\\n\\r\\n    def __init__(self, A):\\r\\n        \\\"\\\"\\\"\\r\\n        :type A: List[int]\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def next(self, n):\\r\\n        \\\"\\\"\\\"\\r\\n        :type n: int\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your RLEIterator object will be instantiated and called as such:\\r\\n# obj = RLEIterator(A)\\r\\n# param_1 = obj.next(n)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class RLEIterator:\\r\\n\\r\\n    def __init__(self, A):\\r\\n        \\\"\\\"\\\"\\r\\n        :type A: List[int]\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def next(self, n):\\r\\n        \\\"\\\"\\\"\\r\\n        :type n: int\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your RLEIterator object will be instantiated and called as such:\\r\\n# obj = RLEIterator(A)\\r\\n# param_1 = obj.next(n)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\\r\\n    \\r\\n} RLEIterator;\\r\\n\\r\\nRLEIterator* rLEIteratorCreate(int* A) {\\r\\n    \\r\\n}\\r\\n\\r\\nint rLEIteratorNext(RLEIterator* obj, int n) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid rLEIteratorFree(RLEIterator* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/**\\r\\n * Your RLEIterator struct will be instantiated and called as such:\\r\\n * struct RLEIterator* obj = rLEIteratorCreate(A);\\r\\n * int param_1 = rLEIteratorNext(obj, n);\\r\\n * rLEIteratorFree(obj);\\r\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class RLEIterator {\\r\\n\\r\\n    public RLEIterator(int[] A) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public int Next(int n) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your RLEIterator object will be instantiated and called as such:\\r\\n * RLEIterator obj = new RLEIterator(A);\\r\\n * int param_1 = obj.Next(n);\\r\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} A\\n */\\nvar RLEIterator = function(A) {\\n    \\n};\\n\\n/** \\n * @param {number} n\\n * @return {number}\\n */\\nRLEIterator.prototype.next = function(n) {\\n    \\n};\\n\\n/** \\n * Your RLEIterator object will be instantiated and called as such:\\n * var obj = Object.create(RLEIterator).createNew(A)\\n * var param_1 = obj.next(n)\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class RLEIterator\\r\\n\\r\\n=begin\\r\\n    :type a: Integer[]\\r\\n=end\\r\\n    def initialize(a)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    :type n: Integer\\r\\n    :rtype: Integer\\r\\n=end\\r\\n    def next(n)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\nend\\r\\n\\r\\n# Your RLEIterator object will be instantiated and called as such:\\r\\n# obj = RLEIterator.new(a)\\r\\n# param_1 = obj.next(n)\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass RLEIterator {\\n\\n    init(_ A: [Int]) {\\n        \\n    }\\n    \\n    func next(_ n: Int) -> Int {\\n      \\n    }\\n}\\n\\n/**\\n * Your RLEIterator object will be instantiated and called as such:\\n * let obj = RLEIterator(A)\\n * let ret_1: Int = obj.next(n)\\n */\\n \"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type RLEIterator struct {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc Constructor(A []int) RLEIterator {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc (this *RLEIterator) Next(n int) int {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * Your RLEIterator object will be instantiated and called as such:\\r\\n * obj := Constructor(A);\\r\\n * param_1 := obj.Next(n);\\r\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class RLEIterator(_A: Array[Int]) {\\r\\n\\r\\n    def next(n: Int): Int = {\\r\\n        \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your RLEIterator object will be instantiated and called as such:\\r\\n * var obj = new RLEIterator(A)\\r\\n * var param_1 = obj.next(n)\\r\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class RLEIterator(A: IntArray) {\\r\\n\\r\\n    fun next(n: Int): Int {\\r\\n        \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your RLEIterator object will be instantiated and called as such:\\r\\n * var obj = RLEIterator(A)\\r\\n * var param_1 = obj.next(n)\\r\\n */\"}]", 
    "categoryTitle": "Algorithms", 
    "article": "{\"id\": 552, \"url\": \"/articles/rle-iterator/\", \"topicId\": 168282}", 
    "allowDiscuss": true, 
    "metaData": "{\r\n    \"classname\": \"RLEIterator\",\r\n    \"maxbytesperline\": 200000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            { \"type\": \"integer[]\",\r\n              \"name\": \"A\"\r\n            }\r\n            ]\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"next\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"n\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            }\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }
}