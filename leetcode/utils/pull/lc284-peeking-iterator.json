{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "sampleTestCase": "[\"PeekingIterator\",\"next\",\"peek\",\"next\",\"next\",\"hasNext\"]\n[[[1,2,3]],[],[],[],[],[]]", 
    "questionFrontendId": "284", 
    "contributors": "[{\"username\": \"porker2008\", \"profileUrl\": \"/porker2008/\"}]", 
    "randomQuestionUrl": "/problems/random-one-question/", 
    "enableSubmit": true, 
    "metaData": "{\r\n  \"name\": \"PeekingIterator\",\r\n  \"generatedefinition\": false,\r\n  \"indriver\": true,\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"list<integer>\"\r\n    },\r\n    {\r\n      \"name\": \"commands\",\r\n      \"type\": \"list<integer>\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\",\r\n    \"dealloc\": true\r\n  },\r\n  \"manualinputcpp\": true\r\n}", 
    "enableRunCode": true, 
    "questionDetailUrl": "/problems/peeking-iterator/", 
    "stats": "{\"totalAccepted\": \"57.7K\", \"totalSubmission\": \"161.3K\", \"acRate\": \"35.8%\"}", 
    "interpretUrl": "/problems/peeking-iterator/interpret_solution/", 
    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}", 
    "__typename": "QuestionNode", 
    "topicTags": [
      {
        "translatedName": null, 
        "slug": "design", 
        "name": "Design", 
        "__typename": "TopicTagNode"
      }
    ], 
    "content": "<p>Given an Iterator class interface with methods: <code>next()</code> and <code>hasNext()</code>, design and implement a PeekingIterator that support the <code>peek()</code> operation -- it essentially peek() at the element that will be returned by the next call to next().</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nAssume that the iterator is initialized to the beginning of the list: <strong><code>[1,2,3]</code></strong>.\r\n\r\nCall <strong><code>next()</code></strong> gets you <strong>1</strong>, the first element in the list.\r\nNow you call <strong><code>peek()</code></strong> and it returns <strong>2</strong>, the next element. Calling <strong><code>next()</code></strong> after that <i><b>still</b></i> return <strong>2</strong>. \r\nYou call <strong><code>next()</code></strong> the final time and it returns <strong>3</strong>, the last element. \r\nCalling <strong><code>hasNext()</code></strong> after that should return <strong>false</strong>.\r\n</pre>\r\n\r\n<p><b>Follow up</b>: How would you extend your design to be generic and work with all types, not just integer?</p>\r\n", 
    "enableTestMode": false, 
    "submitUrl": "/problems/peeking-iterator/submit/", 
    "questionId": "284", 
    "infoVerified": false, 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"]}", 
    "difficulty": "Medium", 
    "allowDiscuss": true, 
    "article": "{}", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"// Below is the interface for Iterator, which is already defined for you.\\r\\n// **DO NOT** modify the interface for Iterator.\\r\\nclass Iterator {\\r\\n    struct Data;\\r\\n\\tData* data;\\r\\npublic:\\r\\n\\tIterator(const vector<int>& nums);\\r\\n\\tIterator(const Iterator& iter);\\r\\n\\tvirtual ~Iterator();\\r\\n\\t// Returns the next element in the iteration.\\r\\n\\tint next();\\r\\n\\t// Returns true if the iteration has more elements.\\r\\n\\tbool hasNext() const;\\r\\n};\\r\\n\\r\\n\\r\\nclass PeekingIterator : public Iterator {\\r\\npublic:\\r\\n\\tPeekingIterator(const vector<int>& nums) : Iterator(nums) {\\r\\n\\t    // Initialize any member here.\\r\\n\\t    // **DO NOT** save a copy of nums and manipulate it directly.\\r\\n\\t    // You should only use the Iterator interface methods.\\r\\n\\t    \\r\\n\\t}\\r\\n\\r\\n    // Returns the next element in the iteration without advancing the iterator.\\r\\n\\tint peek() {\\r\\n        \\r\\n\\t}\\r\\n\\r\\n\\t// hasNext() and next() should behave the same as in the Iterator interface.\\r\\n\\t// Override them if needed.\\r\\n\\tint next() {\\r\\n\\t    \\r\\n\\t}\\r\\n\\r\\n\\tbool hasNext() const {\\r\\n\\t    \\r\\n\\t}\\r\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"// Java Iterator interface reference:\\r\\n// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\\r\\nclass PeekingIterator implements Iterator<Integer> {\\r\\n\\r\\n\\tpublic PeekingIterator(Iterator<Integer> iterator) {\\r\\n\\t    // initialize any member here.\\r\\n\\t    \\r\\n\\t}\\r\\n\\r\\n    // Returns the next element in the iteration without advancing the iterator.\\r\\n\\tpublic Integer peek() {\\r\\n        \\r\\n\\t}\\r\\n\\r\\n\\t// hasNext() and next() should behave the same as in the Iterator interface.\\r\\n\\t// Override them if needed.\\r\\n\\t@Override\\r\\n\\tpublic Integer next() {\\r\\n\\t    \\r\\n\\t}\\r\\n\\r\\n\\t@Override\\r\\n\\tpublic boolean hasNext() {\\r\\n\\t    \\r\\n\\t}\\r\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Below is the interface for Iterator, which is already defined for you.\\r\\n#\\r\\n# class Iterator(object):\\r\\n#     def __init__(self, nums):\\r\\n#         \\\"\\\"\\\"\\r\\n#         Initializes an iterator object to the beginning of a list.\\r\\n#         :type nums: List[int]\\r\\n#         \\\"\\\"\\\"\\r\\n#\\r\\n#     def hasNext(self):\\r\\n#         \\\"\\\"\\\"\\r\\n#         Returns true if the iteration has more elements.\\r\\n#         :rtype: bool\\r\\n#         \\\"\\\"\\\"\\r\\n#\\r\\n#     def next(self):\\r\\n#         \\\"\\\"\\\"\\r\\n#         Returns the next element in the iteration.\\r\\n#         :rtype: int\\r\\n#         \\\"\\\"\\\"\\r\\n\\r\\nclass PeekingIterator(object):\\r\\n    def __init__(self, iterator):\\r\\n        \\\"\\\"\\\"\\r\\n        Initialize your data structure here.\\r\\n        :type iterator: Iterator\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def peek(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Returns the next element in the iteration without advancing the iterator.\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def next(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def hasNext(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n# Your PeekingIterator object will be instantiated and called as such:\\r\\n# iter = PeekingIterator(Iterator(nums))\\r\\n# while iter.hasNext():\\r\\n#     val = iter.peek()   # Get the next element but not advance the iterator.\\r\\n#     iter.next()         # Should return the same value as [val].\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Below is the interface for Iterator, which is already defined for you.\\r\\n#\\r\\n# class Iterator:\\r\\n#     def __init__(self, nums):\\r\\n#         \\\"\\\"\\\"\\r\\n#         Initializes an iterator object to the beginning of a list.\\r\\n#         :type nums: List[int]\\r\\n#         \\\"\\\"\\\"\\r\\n#\\r\\n#     def hasNext(self):\\r\\n#         \\\"\\\"\\\"\\r\\n#         Returns true if the iteration has more elements.\\r\\n#         :rtype: bool\\r\\n#         \\\"\\\"\\\"\\r\\n#\\r\\n#     def next(self):\\r\\n#         \\\"\\\"\\\"\\r\\n#         Returns the next element in the iteration.\\r\\n#         :rtype: int\\r\\n#         \\\"\\\"\\\"\\r\\n\\r\\nclass PeekingIterator:\\r\\n    def __init__(self, iterator):\\r\\n        \\\"\\\"\\\"\\r\\n        Initialize your data structure here.\\r\\n        :type iterator: Iterator\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def peek(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Returns the next element in the iteration without advancing the iterator.\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def next(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def hasNext(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n# Your PeekingIterator object will be instantiated and called as such:\\r\\n# iter = PeekingIterator(Iterator(nums))\\r\\n# while iter.hasNext():\\r\\n#     val = iter.peek()   # Get the next element but not advance the iterator.\\r\\n#     iter.next()         # Should return the same value as [val].\"}]", 
    "judgerAvailable": true, 
    "questionTitleSlug": "peeking-iterator", 
    "similarQuestions": "[{\"title\": \"Binary Search Tree Iterator\", \"titleSlug\": \"binary-search-tree-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Flatten 2D Vector\", \"titleSlug\": \"flatten-2d-vector\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Zigzag Iterator\", \"titleSlug\": \"zigzag-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]", 
    "libraryUrl": null, 
    "sessionId": "0", 
    "questionTitle": "Peeking Iterator", 
    "categoryTitle": "Algorithms", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }, 
  "loginUrl": "/accounts/login/", 
  "subscribeUrl": "/subscribe/"
}