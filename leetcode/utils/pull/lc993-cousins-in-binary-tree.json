{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "questionId": "1035", 
    "questionDetailUrl": "/problems/cousins-in-binary-tree/", 
    "infoVerified": false, 
    "questionFrontendId": "993", 
    "questionTitleSlug": "cousins-in-binary-tree", 
    "similarQuestions": "[]", 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 8.2</code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.18.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 10.15.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.5</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 4.2</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.11.4</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.6</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"], \"rust\": [\"Rust\", \"<p>Compiled with <code>rust 1.31.0 (edition = 2018)</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand</a>\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p>Run with <code>PHP 7.2</code>.</p>\"]}", 
    "topicTags": [
      {
        "translatedName": null, 
        "name": "Tree", 
        "slug": "tree"
      }
    ], 
    "content": "<p>In a binary tree, the root node is at depth <code>0</code>, and children of each depth <code>k</code> node are at depth <code>k+1</code>.</p>\r\n\r\n<p>Two nodes of a binary tree are <em>cousins</em> if they have the same depth, but have <strong>different parents</strong>.</p>\r\n\r\n<p>We are given the <code>root</code> of a binary tree with unique values, and the values <code>x</code>&nbsp;and <code>y</code>&nbsp;of two different nodes in the tree.</p>\r\n\r\n<p>Return&nbsp;<code>true</code>&nbsp;if and only if the nodes corresponding to the values <code>x</code> and <code>y</code> are cousins.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:<br />\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/12/q1248-01.png\" style=\"width: 180px; height: 160px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-1-1\">[1,2,3,4]</span>, x = <span id=\"example-input-1-2\">4</span>, y = <span id=\"example-input-1-3\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:<br />\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/12/q1248-02.png\" style=\"width: 201px; height: 160px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-2-1\">[1,2,3,null,4,null,5]</span>, x = <span id=\"example-input-2-2\">5</span>, y = <span id=\"example-input-2-3\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/13/q1248-03.png\" style=\"width: 156px; height: 160px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-3-1\">[1,2,3,null,4]</span>, x = 2, y = 3\r\n<strong>Output: </strong><span id=\"example-output-3\">false</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the tree will be between <code>2</code> and <code>100</code>.</li>\r\n\t<li>Each node has a unique integer value from <code>1</code> to <code>100</code>.</li>\r\n</ol>\r\n\r\n<div>\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>\r\n", 
    "difficulty": "Easy", 
    "libraryUrl": null, 
    "questionTitle": "Cousins in Binary Tree", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * struct TreeNode {\\r\\n *     int val;\\r\\n *     TreeNode *left;\\r\\n *     TreeNode *right;\\r\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\r\\n * };\\r\\n */\\r\\nclass Solution {\\r\\npublic:\\r\\n    bool isCousins(TreeNode* root, int x, int y) {\\r\\n        \\r\\n    }\\r\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * public class TreeNode {\\r\\n *     int val;\\r\\n *     TreeNode left;\\r\\n *     TreeNode right;\\r\\n *     TreeNode(int x) { val = x; }\\r\\n * }\\r\\n */\\r\\nclass Solution {\\r\\n    public boolean isCousins(TreeNode root, int x, int y) {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution(object):\\n    def isCousins(self, root, x, y):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :type x: int\\n        :type y: int\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * struct TreeNode {\\r\\n *     int val;\\r\\n *     struct TreeNode *left;\\r\\n *     struct TreeNode *right;\\r\\n * };\\r\\n */\\r\\nbool isCousins(struct TreeNode* root, int x, int y) {\\r\\n    \\r\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * public class TreeNode {\\r\\n *     public int val;\\r\\n *     public TreeNode left;\\r\\n *     public TreeNode right;\\r\\n *     public TreeNode(int x) { val = x; }\\r\\n * }\\r\\n */\\r\\npublic class Solution {\\r\\n    public bool IsCousins(TreeNode root, int x, int y) {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @param {number} x\\n * @param {number} y\\n * @return {boolean}\\n */\\nvar isCousins = function(root, x, y) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val)\\n#         @val = val\\n#         @left, @right = nil, nil\\n#     end\\n# end\\n\\n# @param {TreeNode} root\\n# @param {Integer} x\\n# @param {Integer} y\\n# @return {Boolean}\\ndef is_cousins(root, x, y)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * public class TreeNode {\\r\\n *     public var val: Int\\r\\n *     public var left: TreeNode?\\r\\n *     public var right: TreeNode?\\r\\n *     public init(_ val: Int) {\\r\\n *         self.val = val\\r\\n *         self.left = nil\\r\\n *         self.right = nil\\r\\n *     }\\r\\n * }\\r\\n */\\r\\nclass Solution {\\r\\n    func isCousins(_ root: TreeNode?, _ x: Int, _ y: Int) -> Bool {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc isCousins(root *TreeNode, x int, y int) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * class TreeNode(var _value: Int) {\\r\\n *   var value: Int = _value\\r\\n *   var left: TreeNode = null\\r\\n *   var right: TreeNode = null\\r\\n * }\\r\\n */\\r\\nobject Solution {\\r\\n    def isCousins(root: TreeNode, x: Int, y: Int): Boolean = {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\r\\n * Example:\\r\\n * var ti = TreeNode(5)\\r\\n * var v = ti.`val`\\r\\n * Definition for a binary tree node.\\r\\n * class TreeNode(var `val`: Int) {\\r\\n *     var left: TreeNode? = null\\r\\n *     var right: TreeNode? = null\\r\\n * }\\r\\n */\\r\\nclass Solution {\\r\\n    fun isCousins(root: TreeNode?, x: Int, y: Int): Boolean {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\r\\n// #[derive(Debug, PartialEq, Eq)]\\r\\n// pub struct TreeNode {\\r\\n//   pub val: i32,\\r\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\r\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\r\\n// }\\r\\n// \\r\\n// impl TreeNode {\\r\\n//   #[inline]\\r\\n//   pub fn new(val: i32) -> Self {\\r\\n//     TreeNode {\\r\\n//       val,\\r\\n//       left: None,\\r\\n//       right: None\\r\\n//     }\\r\\n//   }\\r\\n// }\\r\\nuse std::rc::Rc;\\r\\nuse std::cell::RefCell;\\r\\nimpl Solution {\\r\\n    pub fn is_cousins(root: Option<Rc<RefCell<TreeNode>>>, x: i32, y: i32) -> bool {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * class TreeNode {\\r\\n *     public $val = null;\\r\\n *     public $left = null;\\r\\n *     public $right = null;\\r\\n *     function __construct($value) { $this->val = $value; }\\r\\n * }\\r\\n */\\r\\nclass Solution {\\r\\n\\r\\n    /**\\r\\n     * @param TreeNode $root\\r\\n     * @param Integer $x\\r\\n     * @param Integer $y\\r\\n     * @return Boolean\\r\\n     */\\r\\n    function isCousins($root, $x, $y) {\\r\\n        \\r\\n    }\\r\\n}\"}]", 
    "categoryTitle": "Algorithms", 
    "article": "{\"id\": 695, \"url\": \"/articles/cousins-in-binary-tree/\", \"topicId\": 238377}", 
    "allowDiscuss": true, 
    "metaData": "{\r\n  \"name\": \"isCousins\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    },\r\n    {\r\n      \"name\": \"x\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"y\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }
}