{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "questionId": "677", 
    "questionDetailUrl": "/problems/map-sum-pairs/", 
    "infoVerified": false, 
    "questionFrontendId": "677", 
    "questionTitleSlug": "map-sum-pairs", 
    "similarQuestions": "[]", 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.10.3</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"]}", 
    "topicTags": [
      {
        "translatedName": null, 
        "name": "Trie", 
        "slug": "trie"
      }
    ], 
    "content": "<p>\r\nImplement a MapSum class with <code>insert</code>, and <code>sum</code> methods.\r\n</p>\r\n\r\n<p>\r\nFor the method <code>insert</code>, you'll be given a pair of (string, integer). The string represents the key and the integer represents the value. If the key already existed, then the original key-value pair will be overridden to the new one.\r\n</p>\r\n\r\n<p>\r\nFor the method <code>sum</code>, you'll be given a string representing the prefix, and you need to return the sum of all the pairs' value whose key starts with the prefix.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\nInput: insert(\"apple\", 3), Output: Null\r\nInput: sum(\"ap\"), Output: 3\r\nInput: insert(\"app\", 2), Output: Null\r\nInput: sum(\"ap\"), Output: 5\r\n</pre>\r\n</p>\r\n", 
    "difficulty": "Medium", 
    "libraryUrl": null, 
    "questionTitle": "Map Sum Pairs", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class MapSum {\\r\\npublic:\\r\\n    /** Initialize your data structure here. */\\r\\n    MapSum() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    void insert(string key, int val) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    int sum(string prefix) {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * Your MapSum object will be instantiated and called as such:\\r\\n * MapSum obj = new MapSum();\\r\\n * obj.insert(key,val);\\r\\n * int param_2 = obj.sum(prefix);\\r\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class MapSum {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    public MapSum() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public void insert(String key, int val) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public int sum(String prefix) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MapSum object will be instantiated and called as such:\\r\\n * MapSum obj = new MapSum();\\r\\n * obj.insert(key,val);\\r\\n * int param_2 = obj.sum(prefix);\\r\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class MapSum(object):\\r\\n\\r\\n    def __init__(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Initialize your data structure here.\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def insert(self, key, val):\\r\\n        \\\"\\\"\\\"\\r\\n        :type key: str\\r\\n        :type val: int\\r\\n        :rtype: void\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def sum(self, prefix):\\r\\n        \\\"\\\"\\\"\\r\\n        :type prefix: str\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your MapSum object will be instantiated and called as such:\\r\\n# obj = MapSum()\\r\\n# obj.insert(key,val)\\r\\n# param_2 = obj.sum(prefix)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class MapSum:\\r\\n\\r\\n    def __init__(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Initialize your data structure here.\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def insert(self, key, val):\\r\\n        \\\"\\\"\\\"\\r\\n        :type key: str\\r\\n        :type val: int\\r\\n        :rtype: void\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def sum(self, prefix):\\r\\n        \\\"\\\"\\\"\\r\\n        :type prefix: str\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your MapSum object will be instantiated and called as such:\\r\\n# obj = MapSum()\\r\\n# obj.insert(key,val)\\r\\n# param_2 = obj.sum(prefix)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\\r\\n    \\r\\n} MapSum;\\r\\n\\r\\n/** Initialize your data structure here. */\\r\\nMapSum* mapSumCreate() {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid mapSumInsert(MapSum* obj, char* key, int val) {\\r\\n    \\r\\n}\\r\\n\\r\\nint mapSumSum(MapSum* obj, char* prefix) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid mapSumFree(MapSum* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MapSum struct will be instantiated and called as such:\\r\\n * struct MapSum* obj = mapSumCreate();\\r\\n * mapSumInsert(obj, key, val);\\r\\n * int param_2 = mapSumSum(obj, prefix);\\r\\n * mapSumFree(obj);\\r\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class MapSum {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    public MapSum() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public void Insert(string key, int val) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public int Sum(string prefix) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MapSum object will be instantiated and called as such:\\r\\n * MapSum obj = new MapSum();\\r\\n * obj.Insert(key,val);\\r\\n * int param_2 = obj.Sum(prefix);\\r\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * Initialize your data structure here.\\r\\n */\\r\\nvar MapSum = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * @param {string} key \\r\\n * @param {number} val\\r\\n * @return {void}\\r\\n */\\r\\nMapSum.prototype.insert = function(key, val) {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * @param {string} prefix\\r\\n * @return {number}\\r\\n */\\r\\nMapSum.prototype.sum = function(prefix) {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * Your MapSum object will be instantiated and called as such:\\r\\n * var obj = Object.create(MapSum).createNew()\\r\\n * obj.insert(key,val)\\r\\n * var param_2 = obj.sum(prefix)\\r\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class MapSum\\r\\n\\r\\n=begin\\r\\n    Initialize your data structure here.\\r\\n=end\\r\\n    def initialize()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    :type key: String\\r\\n    :type val: Integer\\r\\n    :rtype: Void\\r\\n=end\\r\\n    def insert(key, val)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    :type prefix: String\\r\\n    :rtype: Integer\\r\\n=end\\r\\n    def sum(prefix)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\nend\\r\\n\\r\\n# Your MapSum object will be instantiated and called as such:\\r\\n# obj = MapSum.new()\\r\\n# obj.insert(key, val)\\r\\n# param_2 = obj.sum(prefix)\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type MapSum struct {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Initialize your data structure here. */\\r\\nfunc Constructor() MapSum {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc (this *MapSum) Insert(key string, val int)  {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc (this *MapSum) Sum(prefix string) int {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * Your MapSum object will be instantiated and called as such:\\r\\n * obj := Constructor();\\r\\n * obj.Insert(key,val);\\r\\n * param_2 := obj.Sum(prefix);\\r\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class MapSum() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    def insert(key: String, `val`: Int) {\\n        \\n    }\\n\\n    def sum(prefix: String): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MapSum object will be instantiated and called as such:\\n * var obj = new MapSum()\\n * obj.insert(key,`val`)\\n * var param_2 = obj.sum(prefix)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class MapSum() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    fun insert(key: String, `val`: Int) {\\n        \\n    }\\n\\n    fun sum(prefix: String): Int {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MapSum object will be instantiated and called as such:\\n * var obj = MapSum()\\n * obj.insert(key,`val`)\\n * var param_2 = obj.sum(prefix)\\n */\"}]", 
    "contributors": "[{\"username\": \"\\u4eca\\u304c\\u6700\\u9ad8\", \"profileUrl\": \"/jin-gazui-gao/\"}]", 
    "categoryTitle": "Algorithms", 
    "article": "{\"id\": 245, \"url\": \"/articles/map-sum-pairs/\", \"topicId\": 127665}", 
    "allowDiscuss": true, 
    "metaData": "{\r\n    \"classname\": \"MapSum\",\r\n    \"maxbytesperline\": 210000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n        ],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"insert\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"string\",\r\n                    \"name\": \"key\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"val\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            }\r\n        },\r\n        {\r\n            \"name\" : \"sum\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"string\",\r\n                    \"name\": \"prefix\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            }\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }
}