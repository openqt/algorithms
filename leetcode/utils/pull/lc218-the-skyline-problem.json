{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "sessionId": "0", 
    "sampleTestCase": "[[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]", 
    "questionFrontendId": "218", 
    "contributors": "[{\"username\": \"stellari\", \"profileUrl\": \"/stellari/\"}]", 
    "randomQuestionUrl": "/problems/random-one-question/", 
    "enableSubmit": true, 
    "metaData": "{\r\n  \"name\": \"getSkyline\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"buildings\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<pair<integer,integer>>\",\r\n    \"colsize\": 2,\r\n    \"dealloc\": true\r\n  }\r\n}", 
    "questionDetailUrl": "/problems/the-skyline-problem/", 
    "stats": "{\"totalAccepted\": \"65.4K\", \"totalSubmission\": \"222.6K\", \"acRate\": \"29.4%\"}", 
    "interpretUrl": "/problems/the-skyline-problem/interpret_solution/", 
    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}", 
    "__typename": "QuestionNode", 
    "topicTags": [
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "slug": "divide-and-conquer", 
        "name": "Divide and Conquer"
      }, 
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "slug": "heap", 
        "name": "Heap"
      }, 
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "slug": "binary-indexed-tree", 
        "name": "Binary Indexed Tree"
      }, 
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "slug": "segment-tree", 
        "name": "Segment Tree"
      }
    ], 
    "content": "<p>A city&#39;s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Now suppose you are <b>given the locations and height of all the buildings</b> as shown on a cityscape photo (Figure A), write a program to <b>output the skyline</b> formed by these buildings collectively (Figure B).</p>\r\n<!-- Cityscape --><a href=\"/static/images/problemset/skyline1.jpg\" target=\"_blank\"><img alt=\"Buildings\" border=\"0\" src=\"/static/images/problemset/skyline1.jpg\" style=\" max-width: 45%;\" /> </a> <!-- Use this image for the 'turning point' description of skyline --> <a href=\"/static/images/problemset/skyline2.jpg\" target=\"_blank\"> <img alt=\"Skyline Contour\" border=\"0\" src=\"/static/images/problemset/skyline2.jpg\" style=\"max-width: 45%;\" /> </a> <!-- Use the following image if we'd like to define the output as 'horizontal lines' rather than 'turning points'--> <!--\r\n<a href=\"http://tinypic.com?ref=mij3wi\" target=\"_blank\">\r\n<img style=\"max-width: 45%;\" src=\"http://i59.tinypic.com/mij3wi.jpg\" border=\"0\" alt=\"Skyline Contour\">\r\n</a>\r\n-->\r\n\r\n<p>The geometric information of each building is represented by a triplet of integers <code>[Li, Ri, Hi]</code>, where <code>Li</code> and <code>Ri</code> are the x coordinates of the left and right edge of the ith building, respectively, and <code>Hi</code> is its height. It is guaranteed that <code>0 &le; Li, Ri &le; INT_MAX</code>, <code>0 &lt; Hi &le; INT_MAX</code>, and <code>Ri - Li &gt; 0</code>. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.</p>\r\n\r\n<p>For instance, the dimensions of all buildings in Figure A are recorded as: <code>[ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] </code>.</p>\r\n\r\n<p>The output is a list of &quot;<b>key points</b>&quot; (red dots in Figure B) in the format of <code>[ [x1,y1], [x2, y2], [x3, y3], ... ]</code> that uniquely defines a skyline. <b>A key point is the left endpoint of a horizontal line segment</b>. Note that the last key point, where the rightmost building ends, is merely used to mark the termination of the skyline, and always has zero height. Also, the ground in between any two adjacent buildings should be considered part of the skyline contour.</p>\r\n\r\n<p>For instance, the skyline in Figure B should be represented as:<code>[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ]</code>.</p>\r\n\r\n<p><b>Notes:</b></p>\r\n\r\n<ul>\r\n\t<li>The number of buildings in any input list is guaranteed to be in the range <code>[0, 10000]</code>.</li>\r\n\t<li>The input list is already sorted in ascending order by the left x position <code>Li</code>.</li>\r\n\t<li>The output list must be sorted by the x position.</li>\r\n\t<li>There must be no consecutive horizontal lines of equal height in the output skyline. For instance, <code>[...[2 3], [4 5], [7 5], [11 5], [12 7]...]</code> is not acceptable; the three lines of height 5 should be merged into one in the final output as such: <code>[...[2 3], [4 5], [12 7], ...]</code></li>\r\n</ul>\r\n", 
    "enableTestMode": false, 
    "submitUrl": "/problems/the-skyline-problem/submit/", 
    "questionId": "218", 
    "infoVerified": false, 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 4.1.2</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.10.3</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"]}", 
    "difficulty": "Hard", 
    "allowDiscuss": true, 
    "article": "{}", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\r\\npublic:\\r\\n    vector<pair<int, int>> getSkyline(vector<vector<int>>& buildings) {\\r\\n        \\r\\n    }\\r\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\r\\n    public List<int[]> getSkyline(int[][] buildings) {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\r\\n    def getSkyline(self, buildings):\\r\\n        \\\"\\\"\\\"\\r\\n        :type buildings: List[List[int]]\\r\\n        :rtype: List[List[int]]\\r\\n        \\\"\\\"\\\"\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\r\\n    def getSkyline(self, buildings):\\r\\n        \\\"\\\"\\\"\\r\\n        :type buildings: List[List[int]]\\r\\n        :rtype: List[List[int]]\\r\\n        \\\"\\\"\\\"\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\r\\n * Return an array of arrays of size *returnSize.\\r\\n * Note: The returned array must be malloced, assume caller calls free().\\r\\n */\\r\\nint** getSkyline(int** buildings, int buildingsRowSize, int buildingsColSize, int* returnSize) {\\r\\n    \\r\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\r\\n    public IList<int[]> GetSkyline(int[,] buildings) {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * @param {number[][]} buildings\\r\\n * @return {number[][]}\\r\\n */\\r\\nvar getSkyline = function(buildings) {\\r\\n    \\r\\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} buildings\\r\\n# @return {Integer[][]}\\r\\ndef get_skyline(buildings)\\r\\n    \\r\\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\r\\n    func getSkyline(_ buildings: [[Int]]) -> [[Int]] {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func getSkyline(buildings [][]int) [][]int {\\r\\n    \\r\\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\r\\n    def getSkyline(buildings: Array[Array[Int]]): List[Array[Int]] = {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\r\\n    fun getSkyline(buildings: Array<IntArray>): List<IntArray> {\\r\\n        \\r\\n    }\\r\\n}\"}]", 
    "judgerAvailable": true, 
    "questionTitleSlug": "the-skyline-problem", 
    "similarQuestions": "[{\"title\": \"Falling Squares\", \"titleSlug\": \"falling-squares\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]", 
    "libraryUrl": null, 
    "enableRunCode": true, 
    "questionTitle": "The Skyline Problem", 
    "categoryTitle": "Algorithms", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }, 
  "loginUrl": "/accounts/login/", 
  "subscribeUrl": "/subscribe/"
}