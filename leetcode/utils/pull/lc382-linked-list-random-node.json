{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "sampleTestCase": "[\"Solution\",\"getRandom\"]\n[[[1,2,3]],[]]", 
    "questionFrontendId": "382", 
    "contributors": "[]", 
    "randomQuestionUrl": "/problems/random-one-question/", 
    "enableSubmit": true, 
    "metaData": "{\r\n    \"classname\": \"Solution\",\r\n    \"maxbytesperline\": 121000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"type\": \"ListNode\",\r\n                \"name\": \"head\"\r\n            }\r\n        ],\r\n        \"comment\": \"@param head The linked list's head.\\n        Note that the head is guaranteed to be not null, so it contains at least one node.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"getRandom\",\r\n            \"params\": [\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"deserialize\": false,\r\n            \"comment\": \"Returns a random node's value.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}", 
    "enableRunCode": true, 
    "questionDetailUrl": "/problems/linked-list-random-node/", 
    "stats": "{\"totalAccepted\": \"39.8K\", \"totalSubmission\": \"83.8K\", \"acRate\": \"47.6%\"}", 
    "interpretUrl": "/problems/linked-list-random-node/interpret_solution/", 
    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}", 
    "__typename": "QuestionNode", 
    "topicTags": [
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "name": "Reservoir Sampling", 
        "slug": "reservoir-sampling"
      }
    ], 
    "content": "<p>Given a singly linked list, return a random node's value from the linked list. Each node must have the <b>same probability</b> of being chosen.</p>\r\n\r\n<p><b>Follow up:</b><br />\r\nWhat if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n// Init a singly linked list [1,2,3].\r\nListNode head = new ListNode(1);\r\nhead.next = new ListNode(2);\r\nhead.next.next = new ListNode(3);\r\nSolution solution = new Solution(head);\r\n\r\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\r\nsolution.getRandom();\r\n</pre>\r\n</p>", 
    "enableTestMode": false, 
    "submitUrl": "/problems/linked-list-random-node/submit/", 
    "questionId": "382", 
    "infoVerified": false, 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.10.3</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"]}", 
    "difficulty": "Medium", 
    "allowDiscuss": true, 
    "article": "{}", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\r\\n * Definition for singly-linked list.\\r\\n * struct ListNode {\\r\\n *     int val;\\r\\n *     ListNode *next;\\r\\n *     ListNode(int x) : val(x), next(NULL) {}\\r\\n * };\\r\\n */\\r\\nclass Solution {\\r\\npublic:\\r\\n    /** @param head The linked list's head.\\r\\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\\r\\n    Solution(ListNode* head) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Returns a random node's value. */\\r\\n    int getRandom() {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * Your Solution object will be instantiated and called as such:\\r\\n * Solution obj = new Solution(head);\\r\\n * int param_1 = obj.getRandom();\\r\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\r\\n * Definition for singly-linked list.\\r\\n * public class ListNode {\\r\\n *     int val;\\r\\n *     ListNode next;\\r\\n *     ListNode(int x) { val = x; }\\r\\n * }\\r\\n */\\r\\nclass Solution {\\r\\n\\r\\n    /** @param head The linked list's head.\\r\\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\\r\\n    public Solution(ListNode head) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Returns a random node's value. */\\r\\n    public int getRandom() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your Solution object will be instantiated and called as such:\\r\\n * Solution obj = new Solution(head);\\r\\n * int param_1 = obj.getRandom();\\r\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\\r\\n# class ListNode(object):\\r\\n#     def __init__(self, x):\\r\\n#         self.val = x\\r\\n#         self.next = None\\r\\n\\r\\nclass Solution(object):\\r\\n\\r\\n    def __init__(self, head):\\r\\n        \\\"\\\"\\\"\\r\\n        @param head The linked list's head.\\r\\n        Note that the head is guaranteed to be not null, so it contains at least one node.\\r\\n        :type head: ListNode\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def getRandom(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Returns a random node's value.\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your Solution object will be instantiated and called as such:\\r\\n# obj = Solution(head)\\r\\n# param_1 = obj.getRandom()\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n\\n    def __init__(self, head):\\n        \\\"\\\"\\\"\\n        @param head The linked list's head.\\n        Note that the head is guaranteed to be not null, so it contains at least one node.\\n        :type head: ListNode\\n        \\\"\\\"\\\"\\n        \\n\\n    def getRandom(self):\\n        \\\"\\\"\\\"\\n        Returns a random node's value.\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(head)\\n# param_1 = obj.getRandom()\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\r\\n * Definition for singly-linked list.\\r\\n * struct ListNode {\\r\\n *     int val;\\r\\n *     struct ListNode *next;\\r\\n * };\\r\\n */\\r\\ntypedef struct {\\r\\n    \\r\\n} Solution;\\r\\n\\r\\n/** @param head The linked list's head.\\r\\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\\r\\nSolution* solutionCreate(struct ListNode* head) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Returns a random node's value. */\\r\\nint solutionGetRandom(Solution* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid solutionFree(Solution* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/**\\r\\n * Your Solution struct will be instantiated and called as such:\\r\\n * struct Solution* obj = solutionCreate(head);\\r\\n * int param_1 = solutionGetRandom(obj);\\r\\n * solutionFree(obj);\\r\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\r\\n * Definition for singly-linked list.\\r\\n * public class ListNode {\\r\\n *     public int val;\\r\\n *     public ListNode next;\\r\\n *     public ListNode(int x) { val = x; }\\r\\n * }\\r\\n */\\r\\npublic class Solution {\\r\\n\\r\\n    /** @param head The linked list's head.\\r\\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\\r\\n    public Solution(ListNode head) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Returns a random node's value. */\\r\\n    public int GetRandom() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your Solution object will be instantiated and called as such:\\r\\n * Solution obj = new Solution(head);\\r\\n * int param_1 = obj.GetRandom();\\r\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * Definition for singly-linked list.\\r\\n * function ListNode(val) {\\r\\n *     this.val = val;\\r\\n *     this.next = null;\\r\\n * }\\r\\n */\\r\\n/**\\r\\n * @param head The linked list's head.\\r\\n        Note that the head is guaranteed to be not null, so it contains at least one node.\\r\\n * @param {ListNode} head\\r\\n */\\r\\nvar Solution = function(head) {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Returns a random node's value.\\r\\n * @return {number}\\r\\n */\\r\\nSolution.prototype.getRandom = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * Your Solution object will be instantiated and called as such:\\r\\n * var obj = Object.create(Solution).createNew(head)\\r\\n * var param_1 = obj.getRandom()\\r\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\\r\\n# class ListNode\\r\\n#     attr_accessor :val, :next\\r\\n#     def initialize(val)\\r\\n#         @val = val\\r\\n#         @next = nil\\r\\n#     end\\r\\n# end\\r\\n\\r\\nclass Solution\\r\\n\\r\\n=begin\\r\\n    @param head The linked list's head.\\r\\n        Note that the head is guaranteed to be not null, so it contains at least one node.\\r\\n    :type head: ListNode\\r\\n=end\\r\\n    def initialize(head)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Returns a random node's value.\\r\\n    :rtype: Integer\\r\\n=end\\r\\n    def get_random()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\nend\\r\\n\\r\\n# Your Solution object will be instantiated and called as such:\\r\\n# obj = Solution.new(head)\\r\\n# param_1 = obj.get_random()\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\r\\n * Definition for singly-linked list.\\r\\n * type ListNode struct {\\r\\n *     Val int\\r\\n *     Next *ListNode\\r\\n * }\\r\\n */\\r\\ntype Solution struct {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** @param head The linked list's head.\\r\\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\\r\\nfunc Constructor(head *ListNode) Solution {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Returns a random node's value. */\\r\\nfunc (this *Solution) GetRandom() int {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * Your Solution object will be instantiated and called as such:\\r\\n * obj := Constructor(head);\\r\\n * param_1 := obj.GetRandom();\\r\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode(var _x: Int = 0) {\\n *   var next: ListNode = null\\n *   var x: Int = _x\\n * }\\n */\\nclass Solution(_head: ListNode) {\\n\\n    /** @param head The linked list's head.\\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\\n    \\n\\n    /** Returns a random node's value. */\\n    def getRandom(): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * var obj = new Solution(head)\\n * var param_1 = obj.getRandom()\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode(var `val`: Int = 0) {\\n *     var next: ListNode? = null\\n * }\\n */\\nclass Solution(head: ListNode?) {\\n\\n    /** @param head The linked list's head.\\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\\n    \\n\\n    /** Returns a random node's value. */\\n    fun getRandom(): Int {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * var obj = Solution(head)\\n * var param_1 = obj.getRandom()\\n */\"}]", 
    "judgerAvailable": true, 
    "questionTitleSlug": "linked-list-random-node", 
    "similarQuestions": "[{\"title\": \"Random Pick Index\", \"titleSlug\": \"random-pick-index\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]", 
    "libraryUrl": null, 
    "sessionId": "0", 
    "questionTitle": "Linked List Random Node", 
    "categoryTitle": "Algorithms", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }, 
  "loginUrl": "/accounts/login/", 
  "subscribeUrl": "/subscribe/"
}