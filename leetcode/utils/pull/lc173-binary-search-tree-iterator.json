{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "sampleTestCase": "[]", 
    "questionFrontendId": "173", 
    "contributors": "[{\"username\": \"ts\", \"profileUrl\": \"/ts/\"}]", 
    "randomQuestionUrl": "/problems/random-one-question/", 
    "enableSubmit": true, 
    "metaData": "{\r\n  \"name\": \"BSTIterator\",\r\n  \"generatedefinition\": false,\r\n  \"indriver\": true,\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<integer>\",\r\n    \"dealloc\": true\r\n  },\r\n  \"manualinputcpp\": true\r\n}", 
    "enableRunCode": true, 
    "questionDetailUrl": "/problems/binary-search-tree-iterator/", 
    "stats": "{\"totalAccepted\": \"137.3K\", \"totalSubmission\": \"311.9K\", \"acRate\": \"44.0%\"}", 
    "interpretUrl": "/problems/binary-search-tree-iterator/interpret_solution/", 
    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}", 
    "__typename": "QuestionNode", 
    "topicTags": [
      {
        "translatedName": null, 
        "slug": "stack", 
        "name": "Stack", 
        "__typename": "TopicTagNode"
      }, 
      {
        "translatedName": null, 
        "slug": "tree", 
        "name": "Tree", 
        "__typename": "TopicTagNode"
      }, 
      {
        "translatedName": null, 
        "slug": "design", 
        "name": "Design", 
        "__typename": "TopicTagNode"
      }
    ], 
    "content": "<p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.</p>\r\n\r\n<p>Calling <code>next()</code> will return the next smallest number in the BST.</p>\r\n\r\n<p><b>Note: </b><code>next()</code> and <code>hasNext()</code> should run in average O(1) time and uses O(<i>h</i>) memory, where <i>h</i> is the height of the tree. </p>\r\n\r\n<p><b>Credits:</b><br />Special thanks to <a href=\"https://oj.leetcode.com/discuss/user/ts\">@ts</a> for adding this problem and creating all test cases.</p>", 
    "enableTestMode": false, 
    "submitUrl": "/problems/binary-search-tree-iterator/submit/", 
    "questionId": "173", 
    "infoVerified": false, 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"]}", 
    "difficulty": "Medium", 
    "allowDiscuss": true, 
    "article": "{}", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\r\\n * Definition for binary tree\\r\\n * struct TreeNode {\\r\\n *     int val;\\r\\n *     TreeNode *left;\\r\\n *     TreeNode *right;\\r\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\r\\n * };\\r\\n */\\r\\nclass BSTIterator {\\r\\npublic:\\r\\n    BSTIterator(TreeNode *root) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** @return whether we have a next smallest number */\\r\\n    bool hasNext() {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** @return the next smallest number */\\r\\n    int next() {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * Your BSTIterator will be called like this:\\r\\n * BSTIterator i = BSTIterator(root);\\r\\n * while (i.hasNext()) cout << i.next();\\r\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\r\\n * Definition for binary tree\\r\\n * public class TreeNode {\\r\\n *     int val;\\r\\n *     TreeNode left;\\r\\n *     TreeNode right;\\r\\n *     TreeNode(int x) { val = x; }\\r\\n * }\\r\\n */\\r\\n\\r\\npublic class BSTIterator {\\r\\n\\r\\n    public BSTIterator(TreeNode root) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** @return whether we have a next smallest number */\\r\\n    public boolean hasNext() {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** @return the next smallest number */\\r\\n    public int next() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your BSTIterator will be called like this:\\r\\n * BSTIterator i = new BSTIterator(root);\\r\\n * while (i.hasNext()) v[f()] = i.next();\\r\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a  binary tree node\\r\\n# class TreeNode(object):\\r\\n#     def __init__(self, x):\\r\\n#         self.val = x\\r\\n#         self.left = None\\r\\n#         self.right = None\\r\\n\\r\\nclass BSTIterator(object):\\r\\n    def __init__(self, root):\\r\\n        \\\"\\\"\\\"\\r\\n        :type root: TreeNode\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def hasNext(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def next(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n# Your BSTIterator will be called like this:\\r\\n# i, v = BSTIterator(root), []\\r\\n# while i.hasNext(): v.append(i.next())\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\r\\n * Definition for binary tree\\r\\n * struct TreeNode {\\r\\n *     int val;\\r\\n *     struct TreeNode *left;\\r\\n *     struct TreeNode *right;\\r\\n * };\\r\\n */\\r\\nstruct BSTIterator {\\r\\n    \\r\\n};\\r\\n\\r\\nstruct BSTIterator *bstIteratorCreate(struct TreeNode *root) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** @return whether we have a next smallest number */\\r\\nbool bstIteratorHasNext(struct BSTIterator *iter) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** @return the next smallest number */\\r\\nint bstIteratorNext(struct BSTIterator *iter) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Deallocates memory previously allocated for the iterator */\\r\\nvoid bstIteratorFree(struct BSTIterator *iter) {\\r\\n    \\r\\n}\\r\\n\\r\\n/**\\r\\n * Your BSTIterator will be called like this:\\r\\n * struct BSTIterator *i = bstIteratorCreate(root);\\r\\n * while (bstIteratorHasNext(i)) printf(\\\"%d\\\\n\\\", bstIteratorNext(i));\\r\\n * bstIteratorFree(i);\\r\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\r\\n * Definition for binary tree\\r\\n * public class TreeNode {\\r\\n *     public int val;\\r\\n *     public TreeNode left;\\r\\n *     public TreeNode right;\\r\\n *     public TreeNode(int x) { val = x; }\\r\\n * }\\r\\n */\\r\\n\\r\\npublic class BSTIterator {\\r\\n\\r\\n    public BSTIterator(TreeNode root) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** @return whether we have a next smallest number */\\r\\n    public bool HasNext() {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** @return the next smallest number */\\r\\n    public int Next() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your BSTIterator will be called like this:\\r\\n * BSTIterator i = new BSTIterator(root);\\r\\n * while (i.HasNext()) v[f()] = i.Next();\\r\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * Definition for binary tree\\r\\n * function TreeNode(val) {\\r\\n *     this.val = val;\\r\\n *     this.left = this.right = null;\\r\\n * }\\r\\n */\\r\\n\\r\\n/**\\r\\n * @constructor\\r\\n * @param {TreeNode} root - root of the binary search tree\\r\\n */\\r\\nvar BSTIterator = function(root) {\\r\\n    \\r\\n};\\r\\n\\r\\n\\r\\n/**\\r\\n * @this BSTIterator\\r\\n * @returns {boolean} - whether we have a next smallest number\\r\\n */\\r\\nBSTIterator.prototype.hasNext = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * @this BSTIterator\\r\\n * @returns {number} - the next smallest number\\r\\n */\\r\\nBSTIterator.prototype.next = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Your BSTIterator will be called like this:\\r\\n * var i = new BSTIterator(root), a = [];\\r\\n * while (i.hasNext()) a.push(i.next());\\r\\n*/\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\r\\n# class TreeNode\\r\\n#     attr_accessor :val, :left, :right\\r\\n#     def initialize(val)\\r\\n#         @val = val\\r\\n#         @left, @right = nil, nil\\r\\n#     end\\r\\n# end\\r\\n\\r\\nclass BSTIterator\\r\\n    # @param {TreeNode} root\\r\\n    def initialize(root)\\r\\n        \\r\\n    end\\r\\n\\r\\n    # @return {Boolean}\\r\\n    def has_next\\r\\n        \\r\\n    end\\r\\n\\r\\n    # @return {Integer}\\r\\n    def next\\r\\n        \\r\\n    end\\r\\nend\\r\\n\\r\\n# Your BSTIterator will be called like this:\\r\\n# i, v = BSTIterator.new(root), []\\r\\n# while i.has_next()\\r\\n#    v << i.next\\r\\n# end\"}]", 
    "judgerAvailable": true, 
    "questionTitleSlug": "binary-search-tree-iterator", 
    "similarQuestions": "[{\"title\": \"Binary Tree Inorder Traversal\", \"titleSlug\": \"binary-tree-inorder-traversal\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Flatten 2D Vector\", \"titleSlug\": \"flatten-2d-vector\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Zigzag Iterator\", \"titleSlug\": \"zigzag-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Peeking Iterator\", \"titleSlug\": \"peeking-iterator\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Inorder Successor in BST\", \"titleSlug\": \"inorder-successor-in-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]", 
    "libraryUrl": null, 
    "sessionId": "0", 
    "questionTitle": "Binary Search Tree Iterator", 
    "categoryTitle": "Algorithms", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }, 
  "loginUrl": "/accounts/login/", 
  "subscribeUrl": "/subscribe/"
}