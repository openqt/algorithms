{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "questionId": "773", 
    "questionDetailUrl": "/problems/quad-tree-intersection/", 
    "infoVerified": false, 
    "questionFrontendId": "558", 
    "questionTitleSlug": "quad-tree-intersection", 
    "similarQuestions": "[]", 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"]}", 
    "topicTags": [], 
    "content": "<p>A quadtree is a tree data in which each internal node has exactly four children: <code>topLeft</code>, <code>topRight</code>, <code>bottomLeft</code> and <code>bottomRight</code>. Quad trees are often used to partition a two-dimensional space by recursively subdividing it into four quadrants or regions.</p>\r\n\r\n<p>We want to store True/False information in our quad tree. The quad tree is used to represent a <code>N * N</code> boolean grid. For each node, it will be subdivided into four children nodes <strong>until the values in the region it represents are all the same</strong>. Each node has another two boolean attributes : <code>isLeaf</code> and <code>val</code>. <code>isLeaf</code> is true if and only if the node is a leaf node. The <code>val</code> attribute for a leaf node contains the value of the region it represents.</p>\r\n\r\n<p>For example, below are two quad trees A and B:</p>\r\n\r\n<pre>\r\nA:\r\n+-------+-------+   T: true\r\n|       |       |   F: false\r\n|   T   |   T   |\r\n|       |       |\r\n+-------+-------+\r\n|       |       |\r\n|   F   |   F   |\r\n|       |       |\r\n+-------+-------+\r\ntopLeft: T\r\ntopRight: T\r\nbottomLeft: F\r\nbottomRight: F\r\n\r\nB:               \r\n+-------+---+---+\r\n|       | F | F |\r\n|   T   +---+---+\r\n|       | T | T |\r\n+-------+---+---+\r\n|       |       |\r\n|   T   |   F   |\r\n|       |       |\r\n+-------+-------+\r\ntopLeft: T\r\ntopRight:\r\n     topLeft: F\r\n     topRight: F\r\n     bottomLeft: T\r\n     bottomRight: T\r\nbottomLeft: T\r\nbottomRight: F\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Your task is to implement a function that will take two quadtrees and return a quadtree that represents the logical OR (or union) of the two trees.</p>\r\n\r\n<pre>\r\nA:                 B:                 C (A or B):\r\n+-------+-------+  +-------+---+---+  +-------+-------+\r\n|       |       |  |       | F | F |  |       |       |\r\n|   T   |   T   |  |   T   +---+---+  |   T   |   T   |\r\n|       |       |  |       | T | T |  |       |       |\r\n+-------+-------+  +-------+---+---+  +-------+-------+\r\n|       |       |  |       |       |  |       |       |\r\n|   F   |   F   |  |   T   |   F   |  |   T   |   F   |\r\n|       |       |  |       |       |  |       |       |\r\n+-------+-------+  +-------+-------+  +-------+-------+\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>Both <code>A</code> and <code>B</code>&nbsp;represent grids of size <code>N * N</code>.</li>\r\n\t<li><code>N</code> is guaranteed to be a power of 2.</li>\r\n\t<li>If you want to know more about the quad tree, you can refer to its <a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>.</li>\r\n\t<li>The logic OR operation is defined as this: &quot;A or B&quot; is true if <code>A is true</code>, or if <code>B is true</code>, or if <code>both A and B are true</code>.</li>\r\n</ol>\r\n", 
    "difficulty": "Easy", 
    "libraryUrl": null, 
    "questionTitle": "Quad Tree Intersection", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/*\\r\\n// Definition for a QuadTree node.\\r\\nclass Node {\\r\\npublic:\\r\\n    bool val;\\r\\n    bool isLeaf;\\r\\n    Node* topLeft;\\r\\n    Node* topRight;\\r\\n    Node* bottomLeft;\\r\\n    Node* bottomRight;\\r\\n\\r\\n    Node() {}\\r\\n\\r\\n    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {\\r\\n        val = _val;\\r\\n        isLeaf = _isLeaf;\\r\\n        topLeft = _topLeft;\\r\\n        topRight = _topRight;\\r\\n        bottomLeft = _bottomLeft;\\r\\n        bottomRight = _bottomRight;\\r\\n    }\\r\\n};\\r\\n*/\\r\\nclass Solution {\\r\\npublic:\\r\\n    Node* intersect(Node* quadTree1, Node* quadTree2) {\\r\\n        \\r\\n    }\\r\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/*\\r\\n// Definition for a QuadTree node.\\r\\nclass Node {\\r\\n    public boolean val;\\r\\n    public boolean isLeaf;\\r\\n    public Node topLeft;\\r\\n    public Node topRight;\\r\\n    public Node bottomLeft;\\r\\n    public Node bottomRight;\\r\\n\\r\\n    public Node() {}\\r\\n\\r\\n    public Node(boolean _val,boolean _isLeaf,Node _topLeft,Node _topRight,Node _bottomLeft,Node _bottomRight) {\\r\\n        val = _val;\\r\\n        isLeaf = _isLeaf;\\r\\n        topLeft = _topLeft;\\r\\n        topRight = _topRight;\\r\\n        bottomLeft = _bottomLeft;\\r\\n        bottomRight = _bottomRight;\\r\\n    }\\r\\n};\\r\\n*/\\r\\nclass Solution {\\r\\n    public Node intersect(Node quadTree1, Node quadTree2) {\\r\\n        \\r\\n    }\\r\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"\\\"\\\"\\\"\\r\\n# Definition for a QuadTree node.\\r\\nclass Node(object):\\r\\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\\r\\n        self.val = val\\r\\n        self.isLeaf = isLeaf\\r\\n        self.topLeft = topLeft\\r\\n        self.topRight = topRight\\r\\n        self.bottomLeft = bottomLeft\\r\\n        self.bottomRight = bottomRight\\r\\n\\\"\\\"\\\"\\r\\nclass Solution(object):\\r\\n    def intersect(self, quadTree1, quadTree2):\\r\\n        \\\"\\\"\\\"\\r\\n        :type quadTree1: Node\\r\\n        :type quadTree2: Node\\r\\n        :rtype: Node\\r\\n        \\\"\\\"\\\"\\r\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"\\\"\\\"\\\"\\r\\n# Definition for a QuadTree node.\\r\\nclass Node:\\r\\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\\r\\n        self.val = val\\r\\n        self.isLeaf = isLeaf\\r\\n        self.topLeft = topLeft\\r\\n        self.topRight = topRight\\r\\n        self.bottomLeft = bottomLeft\\r\\n        self.bottomRight = bottomRight\\r\\n\\\"\\\"\\\"\\r\\nclass Solution:\\r\\n    def intersect(self, quadTree1, quadTree2):\\r\\n        \\\"\\\"\\\"\\r\\n        :type quadTree1: Node\\r\\n        :type quadTree2: Node\\r\\n        :rtype: Node\\r\\n        \\\"\\\"\\\"\\r\\n        \"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/*\\r\\n// Definition for a QuadTree node.\\r\\npublic class Node {\\r\\n    public bool val;\\r\\n    public bool isLeaf;\\r\\n    public Node topLeft;\\r\\n    public Node topRight;\\r\\n    public Node bottomLeft;\\r\\n    public Node bottomRight;\\r\\n\\r\\n    public Node(){}\\r\\n    public Node(bool _val,bool _isLeaf,Node _topLeft,Node _topRight,Node _bottomLeft,Node _bottomRight) {\\r\\n        val = _val;\\r\\n        isLeaf = _isLeaf;\\r\\n        topLeft = _topLeft;\\r\\n        topRight = _topRight;\\r\\n        bottomLeft = _bottomLeft;\\r\\n        bottomRight = _bottomRight;\\r\\n}\\r\\n*/\\r\\npublic class Solution {\\r\\n    public Node Intersect(Node quadTree1, Node quadTree2) {\\r\\n        \\r\\n    }\\r\\n}\"}]", 
    "contributors": "[{\"username\": \"1337c0d3r\", \"profileUrl\": \"/1337c0d3r/\"}]", 
    "categoryTitle": "Algorithms", 
    "article": "{}", 
    "allowDiscuss": true, 
    "metaData": "{\r\n  \"name\": \"intersect\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"quadTree1\",\r\n      \"type\": \"Node\"\r\n    },\r\n    {\r\n      \"name\": \"quadTree2\",\r\n      \"type\": \"Node\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"Node\"\r\n  },\r\n  \"structures\": [\r\n    {\r\n      \"name\": \"Node\",\r\n      \"comment\": \"Definition for a QuadTree node.\",\r\n      \"members\": [\r\n        {\r\n          \"name\": \"val\",\r\n          \"type\": \"boolean\"\r\n        },\r\n        {\r\n          \"name\": \"isLeaf\",\r\n          \"type\": \"boolean\"\r\n        },\r\n        {\r\n          \"name\": \"topLeft\",\r\n          \"type\": \"Node\"\r\n        },\r\n        {\r\n          \"name\": \"topRight\",\r\n          \"type\": \"Node\"\r\n        },\r\n        {\r\n          \"name\": \"bottomLeft\",\r\n          \"type\": \"Node\"\r\n        },\r\n        {\r\n          \"name\": \"bottomRight\",\r\n          \"type\": \"Node\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }
}