{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "questionId": "955", 
    "questionDetailUrl": "/problems/complete-binary-tree-inserter/", 
    "infoVerified": false, 
    "questionFrontendId": "919", 
    "questionTitleSlug": "complete-binary-tree-inserter", 
    "similarQuestions": "[]", 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"], \"swift\": [\"Swift\", \"<p>Compiled with <code>swift 4.2</code>.</p>\\r\\n\\r\\n<p>We usually keep up with the <a href=\\\"https://swift.org/download/\\\" target=\\\"_blank\\\">latest Swift released by Apple</a>, if not please let us know and we will update it as soon as possible!</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.10.3</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"]}", 
    "topicTags": [
      {
        "translatedName": null, 
        "name": "Tree", 
        "slug": "tree"
      }
    ], 
    "content": "<p>A <em>complete</em> binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.</p>\r\n\r\n<p>Write a data structure&nbsp;<code>CBTInserter</code>&nbsp;that is initialized with a complete binary tree and supports the following operations:</p>\r\n\r\n<ul>\r\n\t<li><code>CBTInserter(TreeNode root)</code> initializes the data structure on a given tree&nbsp;with head node <code>root</code>;</li>\r\n\t<li><code>CBTInserter.insert(int v)</code> will insert a <code>TreeNode</code>&nbsp;into the tree with value <code>node.val =&nbsp;v</code>&nbsp;so that the tree remains complete, <strong>and returns the value of the parent of the inserted <code>TreeNode</code></strong>;</li>\r\n\t<li><code>CBTInserter.get_root()</code> will return the head node of the tree.</li>\r\n</ul>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-1-1\">[&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;get_root&quot;]</span>, inputs = <span id=\"example-input-1-2\">[[[1]],[2],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,1,[1,2]]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-2-1\">[&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;insert&quot;,&quot;get_root&quot;]</span>, inputs = <span id=\"example-input-2-2\">[[[1,2,3,4,5,6]],[7],[8],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,3,4,[1,2,3,4,5,6,7,8]]</span></pre>\r\n</div>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The initial given tree is complete and contains between <code>1</code> and <code>1000</code> nodes.</li>\r\n\t<li><code>CBTInserter.insert</code> is called at most <code>10000</code> times per test case.</li>\r\n\t<li>Every value of a given or inserted node is between <code>0</code> and <code>5000</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<div>&nbsp;</div>\r\n</div>\r\n", 
    "difficulty": "Medium", 
    "libraryUrl": null, 
    "questionTitle": "Complete Binary Tree Inserter", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * struct TreeNode {\\r\\n *     int val;\\r\\n *     TreeNode *left;\\r\\n *     TreeNode *right;\\r\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\r\\n * };\\r\\n */\\r\\nclass CBTInserter {\\r\\npublic:\\r\\n    CBTInserter(TreeNode* root) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    int insert(int v) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    TreeNode* get_root() {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * Your CBTInserter object will be instantiated and called as such:\\r\\n * CBTInserter* obj = new CBTInserter(root);\\r\\n * int param_1 = obj->insert(v);\\r\\n * TreeNode* param_2 = obj->get_root();\\r\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * public class TreeNode {\\r\\n *     int val;\\r\\n *     TreeNode left;\\r\\n *     TreeNode right;\\r\\n *     TreeNode(int x) { val = x; }\\r\\n * }\\r\\n */\\r\\nclass CBTInserter {\\r\\n\\r\\n    public CBTInserter(TreeNode root) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public int insert(int v) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public TreeNode get_root() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your CBTInserter object will be instantiated and called as such:\\r\\n * CBTInserter obj = new CBTInserter(root);\\r\\n * int param_1 = obj.insert(v);\\r\\n * TreeNode param_2 = obj.get_root();\\r\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\r\\n# class TreeNode(object):\\r\\n#     def __init__(self, x):\\r\\n#         self.val = x\\r\\n#         self.left = None\\r\\n#         self.right = None\\r\\n\\r\\nclass CBTInserter(object):\\r\\n\\r\\n    def __init__(self, root):\\r\\n        \\\"\\\"\\\"\\r\\n        :type root: TreeNode\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def insert(self, v):\\r\\n        \\\"\\\"\\\"\\r\\n        :type v: int\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def get_root(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: TreeNode\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your CBTInserter object will be instantiated and called as such:\\r\\n# obj = CBTInserter(root)\\r\\n# param_1 = obj.insert(v)\\r\\n# param_2 = obj.get_root()\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\r\\n# class TreeNode:\\r\\n#     def __init__(self, x):\\r\\n#         self.val = x\\r\\n#         self.left = None\\r\\n#         self.right = None\\r\\n\\r\\nclass CBTInserter:\\r\\n\\r\\n    def __init__(self, root):\\r\\n        \\\"\\\"\\\"\\r\\n        :type root: TreeNode\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def insert(self, v):\\r\\n        \\\"\\\"\\\"\\r\\n        :type v: int\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def get_root(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: TreeNode\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your CBTInserter object will be instantiated and called as such:\\r\\n# obj = CBTInserter(root)\\r\\n# param_1 = obj.insert(v)\\r\\n# param_2 = obj.get_root()\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * struct TreeNode {\\r\\n *     int val;\\r\\n *     struct TreeNode *left;\\r\\n *     struct TreeNode *right;\\r\\n * };\\r\\n */\\r\\ntypedef struct {\\r\\n    \\r\\n} CBTInserter;\\r\\n\\r\\nCBTInserter* cBTInserterCreate(struct TreeNode* root) {\\r\\n    \\r\\n}\\r\\n\\r\\nint cBTInserterInsert(CBTInserter* obj, int v) {\\r\\n    \\r\\n}\\r\\n\\r\\nstruct TreeNode* cBTInserterGet_root(CBTInserter* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid cBTInserterFree(CBTInserter* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/**\\r\\n * Your CBTInserter struct will be instantiated and called as such:\\r\\n * struct CBTInserter* obj = cBTInserterCreate(root);\\r\\n * int param_1 = cBTInserterInsert(obj, v);\\r\\n * struct TreeNode* param_2 = cBTInserterGet_root(obj);\\r\\n * cBTInserterFree(obj);\\r\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * public class TreeNode {\\r\\n *     public int val;\\r\\n *     public TreeNode left;\\r\\n *     public TreeNode right;\\r\\n *     public TreeNode(int x) { val = x; }\\r\\n * }\\r\\n */\\r\\npublic class CBTInserter {\\r\\n\\r\\n    public CBTInserter(TreeNode root) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public int Insert(int v) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public TreeNode Get_root() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your CBTInserter object will be instantiated and called as such:\\r\\n * CBTInserter obj = new CBTInserter(root);\\r\\n * int param_1 = obj.Insert(v);\\r\\n * TreeNode param_2 = obj.Get_root();\\r\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * function TreeNode(val) {\\r\\n *     this.val = val;\\r\\n *     this.left = this.right = null;\\r\\n * }\\r\\n */\\r\\n/**\\r\\n * @param {TreeNode} root\\r\\n */\\r\\nvar CBTInserter = function(root) {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * @param {number} v\\r\\n * @return {number}\\r\\n */\\r\\nCBTInserter.prototype.insert = function(v) {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * @return {TreeNode}\\r\\n */\\r\\nCBTInserter.prototype.get_root = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * Your CBTInserter object will be instantiated and called as such:\\r\\n * var obj = Object.create(CBTInserter).createNew(root)\\r\\n * var param_1 = obj.insert(v)\\r\\n * var param_2 = obj.get_root()\\r\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\r\\n# class TreeNode\\r\\n#     attr_accessor :val, :left, :right\\r\\n#     def initialize(val)\\r\\n#         @val = val\\r\\n#         @left, @right = nil, nil\\r\\n#     end\\r\\n# end\\r\\n\\r\\nclass CBTInserter\\r\\n\\r\\n=begin\\r\\n    :type root: TreeNode\\r\\n=end\\r\\n    def initialize(root)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    :type v: Integer\\r\\n    :rtype: Integer\\r\\n=end\\r\\n    def insert(v)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    :rtype: TreeNode\\r\\n=end\\r\\n    def get_root()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\nend\\r\\n\\r\\n# Your CBTInserter object will be instantiated and called as such:\\r\\n# obj = CBTInserter.new(root)\\r\\n# param_1 = obj.insert(v)\\r\\n# param_2 = obj.get_root()\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * public class TreeNode {\\r\\n *     public var val: Int\\r\\n *     public var left: TreeNode?\\r\\n *     public var right: TreeNode?\\r\\n *     public init(_ val: Int) {\\r\\n *         self.val = val\\r\\n *         self.left = nil\\r\\n *         self.right = nil\\r\\n *     }\\r\\n * }\\r\\n */\\r\\n\\r\\nclass CBTInserter {\\r\\n\\r\\n    init(_ root: TreeNode?) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    func insert(_ v: Int) -> Int {\\r\\n        \\r\\n    }\\r\\n\\r\\n    func get_root() -> TreeNode? {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your CBTInserter object will be instantiated and called as such:\\r\\n * let obj = CBTInserter(root)\\r\\n * let ret_1: Int = obj.insert(v)\\r\\n * let ret_2: TreeNode? = obj.get_root()\\r\\n */\\r\\n \"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * type TreeNode struct {\\r\\n *     Val int\\r\\n *     Left *TreeNode\\r\\n *     Right *TreeNode\\r\\n * }\\r\\n */\\r\\ntype CBTInserter struct {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc Constructor(root *TreeNode) CBTInserter {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc (this *CBTInserter) Insert(v int) int {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc (this *CBTInserter) Get_root() *TreeNode {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * Your CBTInserter object will be instantiated and called as such:\\r\\n * obj := Constructor(root);\\r\\n * param_1 := obj.Insert(v);\\r\\n * param_2 := obj.Get_root();\\r\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * class TreeNode(var _value: Int) {\\r\\n *   var value: Int = _value\\r\\n *   var left: TreeNode = null\\r\\n *   var right: TreeNode = null\\r\\n * }\\r\\n */\\r\\nclass CBTInserter(_root: TreeNode) {\\r\\n\\r\\n    def insert(v: Int): Int = {\\r\\n        \\r\\n    }\\r\\n\\r\\n    def get_root(): TreeNode = {\\r\\n        \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your CBTInserter object will be instantiated and called as such:\\r\\n * var obj = new CBTInserter(root)\\r\\n * var param_1 = obj.insert(v)\\r\\n * var param_2 = obj.get_root()\\r\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * class TreeNode(var `val`: Int = 0) {\\r\\n *     var left: TreeNode? = null\\r\\n *     var right: TreeNode? = null\\r\\n * }\\r\\n */\\r\\nclass CBTInserter(root: TreeNode?) {\\r\\n\\r\\n    fun insert(v: Int): Int {\\r\\n        \\r\\n    }\\r\\n\\r\\n    fun get_root(): TreeNode? {\\r\\n        \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your CBTInserter object will be instantiated and called as such:\\r\\n * var obj = CBTInserter(root)\\r\\n * var param_1 = obj.insert(v)\\r\\n * var param_2 = obj.get_root()\\r\\n */\"}]", 
    "categoryTitle": "Algorithms", 
    "article": "{\"id\": 579, \"url\": \"/articles/complete-binary-tree-inserter/\", \"topicId\": 177998}", 
    "allowDiscuss": true, 
    "metaData": "{\r\n    \"classname\": \"CBTInserter\",\r\n    \"maxbytesperline\": 200000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"name\": \"root\",\r\n                \"type\": \"TreeNode\"\r\n            }\r\n        ]\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"insert\",\r\n            \"params\": [\r\n                {\r\n                    \"name\": \"v\",\r\n                    \"type\": \"integer\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            }\r\n        },\r\n        {\r\n            \"name\" : \"get_root\",\r\n            \"params\": [\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"TreeNode\"\r\n            }\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }
}