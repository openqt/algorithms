{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "sessionId": "0", 
    "sampleTestCase": "[1,2,3,null,null,4,5]", 
    "questionFrontendId": "297", 
    "contributors": "[{\"username\": \"Louis1992\", \"profileUrl\": \"/louis1992/\"}]", 
    "randomQuestionUrl": "/problems/random-one-question/", 
    "enableSubmit": true, 
    "metaData": "{\r\n  \"name\": \"Codec\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ]\r\n}", 
    "questionDetailUrl": "/problems/serialize-and-deserialize-binary-tree/", 
    "stats": "{\"totalAccepted\": \"110.1K\", \"totalSubmission\": \"309.9K\", \"acRate\": \"35.5%\"}", 
    "interpretUrl": "/problems/serialize-and-deserialize-binary-tree/interpret_solution/", 
    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}", 
    "__typename": "QuestionNode", 
    "topicTags": [
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "slug": "tree", 
        "name": "Tree"
      }, 
      {
        "translatedName": null, 
        "__typename": "TopicTagNode", 
        "slug": "design", 
        "name": "Design"
      }
    ], 
    "content": "<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\r\n\r\n<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\r\n\r\n<p><strong>Example:&nbsp;</strong></p>\r\n\r\n<pre>\r\nYou may serialize the following tree:\r\n\r\n    1\r\n   / \\\r\n  2   3\r\n     / \\\r\n    4   5\r\n\r\nas <code>&quot;[1,2,3,null,null,4,5]&quot;</code>\r\n</pre>\r\n\r\n<p><strong>Clarification:</strong> The above format is the same as <a href=\"/faq/#binary-tree\">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.</p>\r\n", 
    "enableTestMode": false, 
    "submitUrl": "/problems/serialize-and-deserialize-binary-tree/submit/", 
    "questionId": "297", 
    "infoVerified": false, 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"]}", 
    "difficulty": "Hard", 
    "allowDiscuss": true, 
    "article": "{}", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * struct TreeNode {\\r\\n *     int val;\\r\\n *     TreeNode *left;\\r\\n *     TreeNode *right;\\r\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\r\\n * };\\r\\n */\\r\\nclass Codec {\\r\\npublic:\\r\\n\\r\\n    // Encodes a tree to a single string.\\r\\n    string serialize(TreeNode* root) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    // Decodes your encoded data to tree.\\r\\n    TreeNode* deserialize(string data) {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n// Your Codec object will be instantiated and called as such:\\r\\n// Codec codec;\\r\\n// codec.deserialize(codec.serialize(root));\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * public class TreeNode {\\r\\n *     int val;\\r\\n *     TreeNode left;\\r\\n *     TreeNode right;\\r\\n *     TreeNode(int x) { val = x; }\\r\\n * }\\r\\n */\\r\\npublic class Codec {\\r\\n\\r\\n    // Encodes a tree to a single string.\\r\\n    public String serialize(TreeNode root) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    // Decodes your encoded data to tree.\\r\\n    public TreeNode deserialize(String data) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n// Your Codec object will be instantiated and called as such:\\r\\n// Codec codec = new Codec();\\r\\n// codec.deserialize(codec.serialize(root));\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\r\\n# class TreeNode(object):\\r\\n#     def __init__(self, x):\\r\\n#         self.val = x\\r\\n#         self.left = None\\r\\n#         self.right = None\\r\\n\\r\\nclass Codec:\\r\\n\\r\\n    def serialize(self, root):\\r\\n        \\\"\\\"\\\"Encodes a tree to a single string.\\r\\n        \\r\\n        :type root: TreeNode\\r\\n        :rtype: str\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def deserialize(self, data):\\r\\n        \\\"\\\"\\\"Decodes your encoded data to tree.\\r\\n        \\r\\n        :type data: str\\r\\n        :rtype: TreeNode\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n# Your Codec object will be instantiated and called as such:\\r\\n# codec = Codec()\\r\\n# codec.deserialize(codec.serialize(root))\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\r\\n# class TreeNode(object):\\r\\n#     def __init__(self, x):\\r\\n#         self.val = x\\r\\n#         self.left = None\\r\\n#         self.right = None\\r\\n\\r\\nclass Codec:\\r\\n\\r\\n    def serialize(self, root):\\r\\n        \\\"\\\"\\\"Encodes a tree to a single string.\\r\\n        \\r\\n        :type root: TreeNode\\r\\n        :rtype: str\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def deserialize(self, data):\\r\\n        \\\"\\\"\\\"Decodes your encoded data to tree.\\r\\n        \\r\\n        :type data: str\\r\\n        :rtype: TreeNode\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n# Your Codec object will be instantiated and called as such:\\r\\n# codec = Codec()\\r\\n# codec.deserialize(codec.serialize(root))\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * struct TreeNode {\\r\\n *     int val;\\r\\n *     struct TreeNode *left;\\r\\n *     struct TreeNode *right;\\r\\n * };\\r\\n */\\r\\n/** Encodes a tree to a single string. */\\r\\nchar* serialize(struct TreeNode* root) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Decodes your encoded data to tree. */\\r\\nstruct TreeNode* deserialize(char* data) {\\r\\n    \\r\\n}\\r\\n\\r\\n// Your functions will be called as such:\\r\\n// char* data = serialize(root);\\r\\n// deserialize(data);\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * public class TreeNode {\\r\\n *     public int val;\\r\\n *     public TreeNode left;\\r\\n *     public TreeNode right;\\r\\n *     public TreeNode(int x) { val = x; }\\r\\n * }\\r\\n */\\r\\npublic class Codec {\\r\\n\\r\\n    // Encodes a tree to a single string.\\r\\n    public string serialize(TreeNode root) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    // Decodes your encoded data to tree.\\r\\n    public TreeNode deserialize(string data) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n// Your Codec object will be instantiated and called as such:\\r\\n// Codec codec = new Codec();\\r\\n// codec.deserialize(codec.serialize(root));\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * Definition for a binary tree node.\\r\\n * function TreeNode(val) {\\r\\n *     this.val = val;\\r\\n *     this.left = this.right = null;\\r\\n * }\\r\\n */\\r\\n\\r\\n/**\\r\\n * Encodes a tree to a single string.\\r\\n *\\r\\n * @param {TreeNode} root\\r\\n * @return {string}\\r\\n */\\r\\nvar serialize = function(root) {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Decodes your encoded data to tree.\\r\\n *\\r\\n * @param {string} data\\r\\n * @return {TreeNode}\\r\\n */\\r\\nvar deserialize = function(data) {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Your functions will be called as such:\\r\\n * deserialize(serialize(root));\\r\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\r\\n# class TreeNode\\r\\n#     attr_accessor :val, :left, :right\\r\\n#     def initialize(val)\\r\\n#         @val = val\\r\\n#         @left, @right = nil, nil\\r\\n#     end\\r\\n# end\\r\\n\\r\\n# Encodes a tree to a single string.\\r\\n#\\r\\n# @param {TreeNode} root\\r\\n# @return {string}\\r\\ndef serialize(root)\\r\\n    \\r\\nend\\r\\n\\r\\n# Decodes your encoded data to tree.\\r\\n#\\r\\n# @param {string} data\\r\\n# @return {TreeNode}\\r\\ndef deserialize(data)\\r\\n    \\r\\nend\\r\\n\\r\\n\\r\\n# Your functions will be called as such:\\r\\n# deserialize(serialize(data))\"}]", 
    "judgerAvailable": true, 
    "questionTitleSlug": "serialize-and-deserialize-binary-tree", 
    "similarQuestions": "[{\"title\": \"Encode and Decode Strings\", \"titleSlug\": \"encode-and-decode-strings\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Serialize and Deserialize BST\", \"titleSlug\": \"serialize-and-deserialize-bst\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Find Duplicate Subtrees\", \"titleSlug\": \"find-duplicate-subtrees\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]", 
    "libraryUrl": null, 
    "enableRunCode": true, 
    "questionTitle": "Serialize and Deserialize Binary Tree", 
    "categoryTitle": "Algorithms", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }, 
  "loginUrl": "/accounts/login/", 
  "subscribeUrl": "/subscribe/"
}