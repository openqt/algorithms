{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "sessionId": "0", 
    "sampleTestCase": "[\"Trie\",\"insert\",\"search\",\"search\",\"startsWith\",\"insert\",\"search\"]\n[[],[\"apple\"],[\"apple\"],[\"app\"],[\"app\"],[\"app\"],[\"app\"]]", 
    "questionFrontendId": "208", 
    "contributors": "[]", 
    "randomQuestionUrl": "/problems/random-one-question/", 
    "enableSubmit": true, 
    "metaData": "{\r\n    \"classname\": \"Trie\",\r\n    \"maxbytesperline\": 210000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n        ],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"insert\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"string\",\r\n                    \"name\": \"word\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Inserts a word into the trie.\"\r\n        },\r\n        {\r\n            \"name\" : \"search\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"string\",\r\n                    \"name\": \"word\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Returns if the word is in the trie.\"\r\n        },\r\n        {\r\n            \"name\" : \"startsWith\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"string\",\r\n                    \"name\": \"prefix\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Returns if there is any word in the trie that starts with the given prefix.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}", 
    "questionDetailUrl": "/problems/implement-trie-prefix-tree/", 
    "stats": "{\"totalAccepted\": \"118.6K\", \"totalSubmission\": \"372.8K\", \"acRate\": \"31.8%\"}", 
    "interpretUrl": "/problems/implement-trie-prefix-tree/interpret_solution/", 
    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}", 
    "__typename": "QuestionNode", 
    "topicTags": [
      {
        "translatedName": null, 
        "slug": "design", 
        "__typename": "TopicTagNode", 
        "name": "Design"
      }, 
      {
        "translatedName": null, 
        "slug": "trie", 
        "__typename": "TopicTagNode", 
        "name": "Trie"
      }
    ], 
    "content": "<p>Implement a trie with <code>insert</code>, <code>search</code>, and <code>startsWith</code> methods.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nTrie trie = new Trie();\r\n\r\ntrie.insert(&quot;apple&quot;);\r\ntrie.search(&quot;apple&quot;);   // returns true\r\ntrie.search(&quot;app&quot;);     // returns false\r\ntrie.startsWith(&quot;app&quot;); // returns true\r\ntrie.insert(&quot;app&quot;);   \r\ntrie.search(&quot;app&quot;);     // returns true\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>You may assume that all inputs are consist of lowercase letters <code>a-z</code>.</li>\r\n\t<li>All inputs are guaranteed to be non-empty strings.</li>\r\n</ul>\r\n", 
    "enableTestMode": false, 
    "submitUrl": "/problems/implement-trie-prefix-tree/submit/", 
    "questionId": "208", 
    "infoVerified": false, 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.10.3</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"]}", 
    "difficulty": "Medium", 
    "allowDiscuss": true, 
    "article": "{\"id\": 40, \"url\": \"/articles/implement-trie-prefix-tree/\", \"topicId\": 127843}", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Trie {\\r\\npublic:\\r\\n    /** Initialize your data structure here. */\\r\\n    Trie() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Inserts a word into the trie. */\\r\\n    void insert(string word) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Returns if the word is in the trie. */\\r\\n    bool search(string word) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\r\\n    bool startsWith(string prefix) {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * Your Trie object will be instantiated and called as such:\\r\\n * Trie obj = new Trie();\\r\\n * obj.insert(word);\\r\\n * bool param_2 = obj.search(word);\\r\\n * bool param_3 = obj.startsWith(prefix);\\r\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Trie {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    public Trie() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Inserts a word into the trie. */\\r\\n    public void insert(String word) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Returns if the word is in the trie. */\\r\\n    public boolean search(String word) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\r\\n    public boolean startsWith(String prefix) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your Trie object will be instantiated and called as such:\\r\\n * Trie obj = new Trie();\\r\\n * obj.insert(word);\\r\\n * boolean param_2 = obj.search(word);\\r\\n * boolean param_3 = obj.startsWith(prefix);\\r\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Trie(object):\\r\\n\\r\\n    def __init__(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Initialize your data structure here.\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def insert(self, word):\\r\\n        \\\"\\\"\\\"\\r\\n        Inserts a word into the trie.\\r\\n        :type word: str\\r\\n        :rtype: void\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def search(self, word):\\r\\n        \\\"\\\"\\\"\\r\\n        Returns if the word is in the trie.\\r\\n        :type word: str\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def startsWith(self, prefix):\\r\\n        \\\"\\\"\\\"\\r\\n        Returns if there is any word in the trie that starts with the given prefix.\\r\\n        :type prefix: str\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your Trie object will be instantiated and called as such:\\r\\n# obj = Trie()\\r\\n# obj.insert(word)\\r\\n# param_2 = obj.search(word)\\r\\n# param_3 = obj.startsWith(prefix)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Trie:\\r\\n\\r\\n    def __init__(self):\\r\\n        \\\"\\\"\\\"\\r\\n        Initialize your data structure here.\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def insert(self, word):\\r\\n        \\\"\\\"\\\"\\r\\n        Inserts a word into the trie.\\r\\n        :type word: str\\r\\n        :rtype: void\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def search(self, word):\\r\\n        \\\"\\\"\\\"\\r\\n        Returns if the word is in the trie.\\r\\n        :type word: str\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def startsWith(self, prefix):\\r\\n        \\\"\\\"\\\"\\r\\n        Returns if there is any word in the trie that starts with the given prefix.\\r\\n        :type prefix: str\\r\\n        :rtype: bool\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your Trie object will be instantiated and called as such:\\r\\n# obj = Trie()\\r\\n# obj.insert(word)\\r\\n# param_2 = obj.search(word)\\r\\n# param_3 = obj.startsWith(prefix)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\\r\\n    \\r\\n} Trie;\\r\\n\\r\\n/** Initialize your data structure here. */\\r\\nTrie* trieCreate() {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Inserts a word into the trie. */\\r\\nvoid trieInsert(Trie* obj, char* word) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Returns if the word is in the trie. */\\r\\nbool trieSearch(Trie* obj, char* word) {\\r\\n    \\r\\n}\\r\\n\\r\\n/** Returns if there is any word in the trie that starts with the given prefix. */\\r\\nbool trieStartsWith(Trie* obj, char* prefix) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid trieFree(Trie* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/**\\r\\n * Your Trie struct will be instantiated and called as such:\\r\\n * struct Trie* obj = trieCreate();\\r\\n * trieInsert(obj, word);\\r\\n * bool param_2 = trieSearch(obj, word);\\r\\n * bool param_3 = trieStartsWith(obj, prefix);\\r\\n * trieFree(obj);\\r\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Trie {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    public Trie() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Inserts a word into the trie. */\\r\\n    public void Insert(string word) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Returns if the word is in the trie. */\\r\\n    public bool Search(string word) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\r\\n    public bool StartsWith(string prefix) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your Trie object will be instantiated and called as such:\\r\\n * Trie obj = new Trie();\\r\\n * obj.Insert(word);\\r\\n * bool param_2 = obj.Search(word);\\r\\n * bool param_3 = obj.StartsWith(prefix);\\r\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * Initialize your data structure here.\\r\\n */\\r\\nvar Trie = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Inserts a word into the trie. \\r\\n * @param {string} word\\r\\n * @return {void}\\r\\n */\\r\\nTrie.prototype.insert = function(word) {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Returns if the word is in the trie. \\r\\n * @param {string} word\\r\\n * @return {boolean}\\r\\n */\\r\\nTrie.prototype.search = function(word) {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * Returns if there is any word in the trie that starts with the given prefix. \\r\\n * @param {string} prefix\\r\\n * @return {boolean}\\r\\n */\\r\\nTrie.prototype.startsWith = function(prefix) {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * Your Trie object will be instantiated and called as such:\\r\\n * var obj = Object.create(Trie).createNew()\\r\\n * obj.insert(word)\\r\\n * var param_2 = obj.search(word)\\r\\n * var param_3 = obj.startsWith(prefix)\\r\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class Trie\\r\\n\\r\\n=begin\\r\\n    Initialize your data structure here.\\r\\n=end\\r\\n    def initialize()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Inserts a word into the trie.\\r\\n    :type word: String\\r\\n    :rtype: Void\\r\\n=end\\r\\n    def insert(word)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Returns if the word is in the trie.\\r\\n    :type word: String\\r\\n    :rtype: Boolean\\r\\n=end\\r\\n    def search(word)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    Returns if there is any word in the trie that starts with the given prefix.\\r\\n    :type prefix: String\\r\\n    :rtype: Boolean\\r\\n=end\\r\\n    def starts_with(prefix)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\nend\\r\\n\\r\\n# Your Trie object will be instantiated and called as such:\\r\\n# obj = Trie.new()\\r\\n# obj.insert(word)\\r\\n# param_2 = obj.search(word)\\r\\n# param_3 = obj.starts_with(prefix)\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type Trie struct {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Initialize your data structure here. */\\r\\nfunc Constructor() Trie {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Inserts a word into the trie. */\\r\\nfunc (this *Trie) Insert(word string)  {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Returns if the word is in the trie. */\\r\\nfunc (this *Trie) Search(word string) bool {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** Returns if there is any word in the trie that starts with the given prefix. */\\r\\nfunc (this *Trie) StartsWith(prefix string) bool {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * Your Trie object will be instantiated and called as such:\\r\\n * obj := Constructor();\\r\\n * obj.Insert(word);\\r\\n * param_2 := obj.Search(word);\\r\\n * param_3 := obj.StartsWith(prefix);\\r\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class Trie() {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    \\r\\n\\r\\n    /** Inserts a word into the trie. */\\r\\n    def insert(word: String) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Returns if the word is in the trie. */\\r\\n    def search(word: String): Boolean = {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\r\\n    def startsWith(prefix: String): Boolean = {\\r\\n        \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your Trie object will be instantiated and called as such:\\r\\n * var obj = new Trie()\\r\\n * obj.insert(word)\\r\\n * var param_2 = obj.search(word)\\r\\n * var param_3 = obj.startsWith(prefix)\\r\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Trie() {\\r\\n\\r\\n    /** Initialize your data structure here. */\\r\\n    \\r\\n\\r\\n    /** Inserts a word into the trie. */\\r\\n    fun insert(word: String) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Returns if the word is in the trie. */\\r\\n    fun search(word: String): Boolean {\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\r\\n    fun startsWith(prefix: String): Boolean {\\r\\n        \\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your Trie object will be instantiated and called as such:\\r\\n * var obj = Trie()\\r\\n * obj.insert(word)\\r\\n * var param_2 = obj.search(word)\\r\\n * var param_3 = obj.startsWith(prefix)\\r\\n */\"}]", 
    "judgerAvailable": true, 
    "questionTitleSlug": "implement-trie-prefix-tree", 
    "similarQuestions": "[{\"title\": \"Add and Search Word - Data structure design\", \"titleSlug\": \"add-and-search-word-data-structure-design\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Design Search Autocomplete System\", \"titleSlug\": \"design-search-autocomplete-system\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Replace Words\", \"titleSlug\": \"replace-words\", \"difficulty\": \"Medium\", \"translatedTitle\": null}, {\"title\": \"Implement Magic Dictionary\", \"titleSlug\": \"implement-magic-dictionary\", \"difficulty\": \"Medium\", \"translatedTitle\": null}]", 
    "libraryUrl": null, 
    "enableRunCode": true, 
    "questionTitle": "Implement Trie (Prefix Tree)", 
    "categoryTitle": "Algorithms", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }, 
  "loginUrl": "/accounts/login/", 
  "subscribeUrl": "/subscribe/"
}