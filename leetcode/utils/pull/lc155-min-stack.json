{
  "isCurrentUserAuthenticated": false, 
  "isPremium": false, 
  "question": {
    "questionId": "155", 
    "questionDetailUrl": "/problems/min-stack/", 
    "infoVerified": false, 
    "questionFrontendId": "155", 
    "questionTitleSlug": "min-stack", 
    "similarQuestions": "[{\"title\": \"Sliding Window Maximum\", \"titleSlug\": \"sliding-window-maximum\", \"difficulty\": \"Hard\", \"translatedTitle\": null}, {\"title\": \"Max Stack\", \"titleSlug\": \"max-stack\", \"difficulty\": \"Hard\", \"translatedTitle\": null}]", 
    "translatedContent": null, 
    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code>g++ 6.3</code> using the latest C++ 14 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p>Compiled with <code>java 1.8.0</code> taking advantage of the latest Java 8 features such as lambda expressions and stream API.</p>\\n\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"python\": [\"Python\", \"<p>Compiled with <code>python 2.7.12</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\n\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 6.3</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p>Compiled with <code>mono 5.12.0</code> providing <a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7\\\" target=\\\"_blank\\\">full support for C# 7</a>.</p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p>Run with <code>nodejs 8.8.1</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"http://underscorejs.org/\\\" target=\\\"_blank\\\">underscore.js</a> library is included by default.</p>\"], \"ruby\": [\"Ruby\", \"<p>Run with <code>ruby 2.4.1</code>.</p>\"], \"golang\": [\"Go\", \"<p>Compiled with <code>go 1.10.3</code>.</p>\"], \"python3\": [\"Python3\", \"<p>Run with <code>python 3.5.2</code>.</p>\\n\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\"], \"scala\": [\"Scala\", \"<p>Compiled with <code>scala 2.11.6</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p>Compiled with <code>kotlin 1.2.50</code>.</p>\"]}", 
    "topicTags": [
      {
        "translatedName": null, 
        "name": "Stack", 
        "slug": "stack"
      }, 
      {
        "translatedName": null, 
        "name": "Design", 
        "slug": "design"
      }
    ], 
    "content": "<p>\r\nDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\r\n<ul>\r\n<li>\r\npush(x) -- Push element x onto stack.\r\n</li>\r\n<li>\r\npop() -- Removes the element on top of the stack.\r\n</li>\r\n<li>\r\ntop() -- Get the top element.\r\n</li>\r\n<li>\r\ngetMin() -- Retrieve the minimum element in the stack.\r\n</li>\r\n</ul>\r\n</p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\nMinStack minStack = new MinStack();\r\nminStack.push(-2);\r\nminStack.push(0);\r\nminStack.push(-3);\r\nminStack.getMin();   --> Returns -3.\r\nminStack.pop();\r\nminStack.top();      --> Returns 0.\r\nminStack.getMin();   --> Returns -2.\r\n</pre>\r\n</p>", 
    "difficulty": "Easy", 
    "libraryUrl": null, 
    "questionTitle": "Min Stack", 
    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class MinStack {\\r\\npublic:\\r\\n    /** initialize your data structure here. */\\r\\n    MinStack() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    void push(int x) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    void pop() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    int top() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    int getMin() {\\r\\n        \\r\\n    }\\r\\n};\\r\\n\\r\\n/**\\r\\n * Your MinStack object will be instantiated and called as such:\\r\\n * MinStack obj = new MinStack();\\r\\n * obj.push(x);\\r\\n * obj.pop();\\r\\n * int param_3 = obj.top();\\r\\n * int param_4 = obj.getMin();\\r\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class MinStack {\\r\\n\\r\\n    /** initialize your data structure here. */\\r\\n    public MinStack() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public void push(int x) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public void pop() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public int top() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public int getMin() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MinStack object will be instantiated and called as such:\\r\\n * MinStack obj = new MinStack();\\r\\n * obj.push(x);\\r\\n * obj.pop();\\r\\n * int param_3 = obj.top();\\r\\n * int param_4 = obj.getMin();\\r\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class MinStack(object):\\r\\n\\r\\n    def __init__(self):\\r\\n        \\\"\\\"\\\"\\r\\n        initialize your data structure here.\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def push(self, x):\\r\\n        \\\"\\\"\\\"\\r\\n        :type x: int\\r\\n        :rtype: void\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def pop(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: void\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def top(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def getMin(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your MinStack object will be instantiated and called as such:\\r\\n# obj = MinStack()\\r\\n# obj.push(x)\\r\\n# obj.pop()\\r\\n# param_3 = obj.top()\\r\\n# param_4 = obj.getMin()\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class MinStack:\\r\\n\\r\\n    def __init__(self):\\r\\n        \\\"\\\"\\\"\\r\\n        initialize your data structure here.\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def push(self, x):\\r\\n        \\\"\\\"\\\"\\r\\n        :type x: int\\r\\n        :rtype: void\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def pop(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: void\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def top(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n    def getMin(self):\\r\\n        \\\"\\\"\\\"\\r\\n        :rtype: int\\r\\n        \\\"\\\"\\\"\\r\\n        \\r\\n\\r\\n\\r\\n# Your MinStack object will be instantiated and called as such:\\r\\n# obj = MinStack()\\r\\n# obj.push(x)\\r\\n# obj.pop()\\r\\n# param_3 = obj.top()\\r\\n# param_4 = obj.getMin()\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"typedef struct {\\r\\n    \\r\\n} MinStack;\\r\\n\\r\\n/** initialize your data structure here. */\\r\\nMinStack* minStackCreate(int maxSize) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid minStackPush(MinStack* obj, int x) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid minStackPop(MinStack* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\nint minStackTop(MinStack* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\nint minStackGetMin(MinStack* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\nvoid minStackFree(MinStack* obj) {\\r\\n    \\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MinStack struct will be instantiated and called as such:\\r\\n * struct MinStack* obj = minStackCreate(maxSize);\\r\\n * minStackPush(obj, x);\\r\\n * minStackPop(obj);\\r\\n * int param_3 = minStackTop(obj);\\r\\n * int param_4 = minStackGetMin(obj);\\r\\n * minStackFree(obj);\\r\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class MinStack {\\r\\n\\r\\n    /** initialize your data structure here. */\\r\\n    public MinStack() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public void Push(int x) {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public void Pop() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public int Top() {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    public int GetMin() {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Your MinStack object will be instantiated and called as such:\\r\\n * MinStack obj = new MinStack();\\r\\n * obj.Push(x);\\r\\n * obj.Pop();\\r\\n * int param_3 = obj.Top();\\r\\n * int param_4 = obj.GetMin();\\r\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\r\\n * initialize your data structure here.\\r\\n */\\r\\nvar MinStack = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * @param {number} x\\r\\n * @return {void}\\r\\n */\\r\\nMinStack.prototype.push = function(x) {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * @return {void}\\r\\n */\\r\\nMinStack.prototype.pop = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * @return {number}\\r\\n */\\r\\nMinStack.prototype.top = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/**\\r\\n * @return {number}\\r\\n */\\r\\nMinStack.prototype.getMin = function() {\\r\\n    \\r\\n};\\r\\n\\r\\n/** \\r\\n * Your MinStack object will be instantiated and called as such:\\r\\n * var obj = Object.create(MinStack).createNew()\\r\\n * obj.push(x)\\r\\n * obj.pop()\\r\\n * var param_3 = obj.top()\\r\\n * var param_4 = obj.getMin()\\r\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class MinStack\\r\\n\\r\\n=begin\\r\\n    initialize your data structure here.\\r\\n=end\\r\\n    def initialize()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    :type x: Integer\\r\\n    :rtype: Void\\r\\n=end\\r\\n    def push(x)\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    :rtype: Void\\r\\n=end\\r\\n    def pop()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    :rtype: Integer\\r\\n=end\\r\\n    def top()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\n=begin\\r\\n    :rtype: Integer\\r\\n=end\\r\\n    def get_min()\\r\\n        \\r\\n    end\\r\\n\\r\\n\\r\\nend\\r\\n\\r\\n# Your MinStack object will be instantiated and called as such:\\r\\n# obj = MinStack.new()\\r\\n# obj.push(x)\\r\\n# obj.pop()\\r\\n# param_3 = obj.top()\\r\\n# param_4 = obj.get_min()\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type MinStack struct {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/** initialize your data structure here. */\\r\\nfunc Constructor() MinStack {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc (this *MinStack) Push(x int)  {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc (this *MinStack) Pop()  {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc (this *MinStack) Top() int {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nfunc (this *MinStack) GetMin() int {\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * Your MinStack object will be instantiated and called as such:\\r\\n * obj := Constructor();\\r\\n * obj.Push(x);\\r\\n * obj.Pop();\\r\\n * param_3 := obj.Top();\\r\\n * param_4 := obj.GetMin();\\r\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class MinStack() {\\n\\n    /** initialize your data structure here. */\\n    \\n\\n    def push(x: Int) {\\n        \\n    }\\n\\n    def pop() {\\n        \\n    }\\n\\n    def top(): Int = {\\n        \\n    }\\n\\n    def getMin(): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MinStack object will be instantiated and called as such:\\n * var obj = new MinStack()\\n * obj.push(x)\\n * obj.pop()\\n * var param_3 = obj.top()\\n * var param_4 = obj.getMin()\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class MinStack() {\\n\\n    /** initialize your data structure here. */\\n    \\n\\n    fun push(x: Int) {\\n        \\n    }\\n\\n    fun pop() {\\n        \\n    }\\n\\n    fun top(): Int {\\n        \\n    }\\n\\n    fun getMin(): Int {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MinStack object will be instantiated and called as such:\\n * var obj = MinStack()\\n * obj.push(x)\\n * obj.pop()\\n * var param_3 = obj.top()\\n * var param_4 = obj.getMin()\\n */\"}]", 
    "contributors": "[]", 
    "categoryTitle": "Algorithms", 
    "article": "{}", 
    "allowDiscuss": true, 
    "metaData": "{\r\n  \"classname\": \"MinStack\",\r\n  \"maxbytesperline\": 130000,\r\n  \"constructor\": {\r\n      \"params\": [\r\n        {\r\n            \"type\": \"integer\",\r\n            \"name\": \"maxSize\",\r\n            \"lang\": \"c\",\r\n            \"value\": \"64000\"\r\n        }\r\n      ],\r\n      \"comment\": \"initialize your data structure here.\"\r\n  },\r\n  \"methods\": [\r\n      { \"name\" : \"push\",\r\n        \"params\": [\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"x\"\r\n            }],\r\n        \"return\": {\r\n            \"type\": \"void\"\r\n        }\r\n      },\r\n      { \"name\": \"pop\",\r\n        \"params\": [],\r\n        \"return\": {\r\n            \"type\": \"void\"\r\n        }\r\n      },\r\n      { \"name\": \"top\",\r\n        \"params\": [],\r\n        \"return\": {\r\n            \"type\": \"integer\"\r\n        }\r\n      },\r\n      { \"name\": \"getMin\",\r\n        \"params\": [],\r\n        \"return\": {\r\n            \"type\": \"integer\"\r\n        }\r\n      }\r\n  ],\r\n  \"indriver\": false,\r\n  \"systemdesign\": true,\r\n  \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}", 
    "mysqlSchemas": [], 
    "translatedTitle": null
  }
}